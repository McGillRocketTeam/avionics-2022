
FC_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005930  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005afc  08005afc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005afc  08005afc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005afc  08005afc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000858  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20000878  20000878  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165bd  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4e  00000000  00000000  0003660d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00039160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  0003a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f08  00000000  00000000  0003b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196f9  00000000  00000000  0005e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbec4  00000000  00000000  00077e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153d0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000556c  00000000  00000000  00153d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005aac 	.word	0x08005aac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08005aac 	.word	0x08005aac

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 ffae 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f81c 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 fbd2 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 fba0 	bl	8000928 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001e8:	f000 f9c6 	bl	8000578 <MX_I2C1_Init>
  MX_RTC_Init();
 80001ec:	f000 fa04 	bl	80005f8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 fb6a 	bl	80008c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80001f4:	f000 faa2 	bl	800073c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001f8:	f000 faee 	bl	80007d8 <MX_TIM3_Init>
  MX_SPI2_Init();
 80001fc:	f000 fa22 	bl	8000644 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000200:	f005 fb62 	bl	80058c8 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000204:	f000 fa5c 	bl	80006c0 <MX_SPI3_Init>
  MX_ADC2_Init();
 8000208:	f000 f8e8 	bl	80003dc <MX_ADC2_Init>
  MX_ADC3_Init();
 800020c:	f000 f944 	bl	8000498 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000210:	f000 f874 	bl	80002fc <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	e7fe      	b.n	8000214 <main+0x40>
	...

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b0a6      	sub	sp, #152	; 0x98
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fc38 	bl	8005a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2258      	movs	r2, #88	; 0x58
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f005 fc2a 	bl	8005a9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000248:	2309      	movs	r3, #9
 800024a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800026a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800026e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800027c:	4618      	mov	r0, r3
 800027e:	f002 f9d3 	bl	8002628 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000288:	f000 fc4e 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a6:	2102      	movs	r1, #2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 f8d3 	bl	8003454 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002b4:	f000 fc38 	bl	8000b28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <SystemClock_Config+0xe0>)
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80002c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80002ca:	2310      	movs	r3, #16
 80002cc:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002d4:	2300      	movs	r3, #0
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80002d8:	2300      	movs	r3, #0
 80002da:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 faf0 	bl	80038c4 <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80002ea:	f000 fc1d 	bl	8000b28 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3798      	adds	r7, #152	; 0x98
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	00310123 	.word	0x00310123

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08a      	sub	sp, #40	; 0x28
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000302:	f107 031c 	add.w	r3, r7, #28
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800031e:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800032c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032e:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000334:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800033a:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000340:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000350:	2201      	movs	r2, #1
 8000352:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000354:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800035a:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800035c:	2201      	movs	r2, #1
 800035e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000362:	2200      	movs	r2, #0
 8000364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800036a:	2204      	movs	r2, #4
 800036c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000370:	2200      	movs	r2, #0
 8000372:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000376:	2200      	movs	r2, #0
 8000378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037a:	4817      	ldr	r0, [pc, #92]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800037c:	f000 ff42 	bl	8001204 <HAL_ADC_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000386:	f000 fbcf 	bl	8000b28 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800038e:	f107 031c 	add.w	r3, r7, #28
 8000392:	4619      	mov	r1, r3
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000396:	f001 fc1b 	bl	8001bd0 <HAL_ADCEx_MultiModeConfigChannel>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80003a0:	f000 fbc2 	bl	8000b28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80003a4:	230e      	movs	r3, #14
 80003a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ac:	2300      	movs	r3, #0
 80003ae:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_ADC1_Init+0xdc>)
 80003c2:	f001 f919 	bl	80015f8 <HAL_ADC_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80003cc:	f000 fbac 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3728      	adds	r7, #40	; 0x28
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200001fc 	.word	0x200001fc

080003dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003f2:	4b27      	ldr	r3, [pc, #156]	; (8000490 <MX_ADC2_Init+0xb4>)
 80003f4:	4a27      	ldr	r2, [pc, #156]	; (8000494 <MX_ADC2_Init+0xb8>)
 80003f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_ADC2_Init+0xb4>)
 80003fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80003fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000400:	4b23      	ldr	r3, [pc, #140]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800040c:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_ADC2_Init+0xb4>)
 800040e:	2200      	movs	r2, #0
 8000410:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000414:	2200      	movs	r2, #0
 8000416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_ADC2_Init+0xb4>)
 800041c:	2200      	movs	r2, #0
 800041e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000422:	2201      	movs	r2, #1
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_ADC2_Init+0xb4>)
 800042e:	2201      	movs	r2, #1
 8000430:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_ADC2_Init+0xb4>)
 800043c:	2204      	movs	r2, #4
 800043e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000442:	2200      	movs	r2, #0
 8000444:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_ADC2_Init+0xb4>)
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800044c:	4810      	ldr	r0, [pc, #64]	; (8000490 <MX_ADC2_Init+0xb4>)
 800044e:	f000 fed9 	bl	8001204 <HAL_ADC_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000458:	f000 fb66 	bl	8000b28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800045c:	230c      	movs	r3, #12
 800045e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000460:	2301      	movs	r3, #1
 8000462:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_ADC2_Init+0xb4>)
 800047a:	f001 f8bd 	bl	80015f8 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000484:	f000 fb50 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	200000b0 	.word	0x200000b0
 8000494:	50000100 	.word	0x50000100

08000498 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800049e:	f107 031c 	add.w	r3, r7, #28
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
 80004b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80004ba:	4b2d      	ldr	r3, [pc, #180]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004bc:	4a2d      	ldr	r2, [pc, #180]	; (8000574 <MX_ADC3_Init+0xdc>)
 80004be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004c0:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e0:	4b23      	ldr	r3, [pc, #140]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_ADC3_Init+0xd8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_ADC3_Init+0xd8>)
 8000502:	2204      	movs	r2, #4
 8000504:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_ADC3_Init+0xd8>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_ADC3_Init+0xd8>)
 800050e:	2200      	movs	r2, #0
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000512:	4817      	ldr	r0, [pc, #92]	; (8000570 <MX_ADC3_Init+0xd8>)
 8000514:	f000 fe76 	bl	8001204 <HAL_ADC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800051e:	f000 fb03 	bl	8000b28 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	4619      	mov	r1, r3
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <MX_ADC3_Init+0xd8>)
 800052e:	f001 fb4f 	bl	8001bd0 <HAL_ADCEx_MultiModeConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000538:	f000 faf6 	bl	8000b28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000540:	2301      	movs	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_ADC3_Init+0xd8>)
 800055a:	f001 f84d 	bl	80015f8 <HAL_ADC_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000564:	f000 fae0 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	; 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000024c 	.word	0x2000024c
 8000574:	50000400 	.word	0x50000400

08000578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_I2C1_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_I2C1_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_I2C1_Init+0x74>)
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x7c>)
 8000586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_I2C1_Init+0x74>)
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_I2C1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <MX_I2C1_Init+0x74>)
 80005b4:	f001 ff12 	bl	80023dc <HAL_I2C_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005be:	f000 fab3 	bl	8000b28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <MX_I2C1_Init+0x74>)
 80005c6:	f001 ff98 	bl	80024fa <HAL_I2CEx_ConfigAnalogFilter>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d0:	f000 faaa 	bl	8000b28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d4:	2100      	movs	r1, #0
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_I2C1_Init+0x74>)
 80005d8:	f001 ffda 	bl	8002590 <HAL_I2CEx_ConfigDigitalFilter>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f000 faa1 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000100 	.word	0x20000100
 80005f0:	40005400 	.word	0x40005400
 80005f4:	10707dbc 	.word	0x10707dbc

080005f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_RTC_Init+0x44>)
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <MX_RTC_Init+0x48>)
 8000600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_RTC_Init+0x44>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_RTC_Init+0x44>)
 800060a:	227f      	movs	r2, #127	; 0x7f
 800060c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_RTC_Init+0x44>)
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_RTC_Init+0x44>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_RTC_Init+0x44>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_RTC_Init+0x44>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_RTC_Init+0x44>)
 8000628:	f003 fb6a 	bl	8003d00 <HAL_RTC_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000632:	f000 fa79 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000320 	.word	0x20000320
 8000640:	40002800 	.word	0x40002800

08000644 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_SPI2_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_SPI2_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000654:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_SPI2_Init+0x74>)
 800065e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000662:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_SPI2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000676:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_SPI2_Init+0x74>)
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_SPI2_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000692:	2207      	movs	r2, #7
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_SPI2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_SPI2_Init+0x74>)
 800069e:	2208      	movs	r2, #8
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_SPI2_Init+0x74>)
 80006a4:	f003 fc11 	bl	8003eca <HAL_SPI_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f000 fa3b 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000004c 	.word	0x2000004c
 80006bc:	40003800 	.word	0x40003800

080006c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_SPI3_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <MX_SPI3_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_SPI3_Init+0x74>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_SPI3_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI3_Init+0x74>)
 80006da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI3_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_SPI3_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI3_Init+0x74>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI3_Init+0x74>)
 80006f6:	2218      	movs	r2, #24
 80006f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI3_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI3_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_SPI3_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI3_Init+0x74>)
 800070e:	2207      	movs	r2, #7
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_SPI3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI3_Init+0x74>)
 800071a:	2208      	movs	r2, #8
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_SPI3_Init+0x74>)
 8000720:	f003 fbd3 	bl	8003eca <HAL_SPI_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f9fd 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000198 	.word	0x20000198
 8000738:	40003c00 	.word	0x40003c00

0800073c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_TIM2_Init+0x98>)
 800075c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000760:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000764:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000768:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM2_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_TIM2_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_TIM2_Init+0x98>)
 8000786:	f003 fc4b 	bl	8004020 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f9ca 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_TIM2_Init+0x98>)
 80007a2:	f003 ff25 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007ac:	f000 f9bc 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_TIM2_Init+0x98>)
 80007be:	f004 fc4d 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 f9ae 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000340 	.word	0x20000340

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800080c:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_TIM3_Init+0xec>)
 800080e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_TIM3_Init+0xe8>)
 8000812:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 163;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_TIM3_Init+0xe8>)
 8000820:	22a3      	movs	r2, #163	; 0xa3
 8000822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_TIM3_Init+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000830:	4823      	ldr	r0, [pc, #140]	; (80008c0 <MX_TIM3_Init+0xe8>)
 8000832:	f003 fbf5 	bl	8004020 <HAL_TIM_Base_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800083c:	f000 f974 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084a:	4619      	mov	r1, r3
 800084c:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800084e:	f003 fecf 	bl	80045f0 <HAL_TIM_ConfigClockSource>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000858:	f000 f966 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800085e:	f003 fc36 	bl	80040ce <HAL_TIM_PWM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000868:	f000 f95e 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4811      	ldr	r0, [pc, #68]	; (80008c0 <MX_TIM3_Init+0xe8>)
 800087c:	f004 fbee 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000886:	f000 f94f 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088a:	2360      	movs	r3, #96	; 0x60
 800088c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 82;
 800088e:	2352      	movs	r3, #82	; 0x52
 8000890:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	2204      	movs	r2, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM3_Init+0xe8>)
 80008a2:	f003 fd95 	bl	80043d0 <HAL_TIM_PWM_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008ac:	f000 f93c 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM3_Init+0xe8>)
 80008b2:	f000 fb27 	bl	8000f04 <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3738      	adds	r7, #56	; 0x38
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000014c 	.word	0x2000014c
 80008c4:	40000400 	.word	0x40000400

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART1_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART1_UART_Init+0x58>)
 800090c:	f004 fc50 	bl	80051b0 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f907 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000029c 	.word	0x2000029c
 8000924:	40013800 	.word	0x40013800

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f004 fc20 	bl	80051b0 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f8d7 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000038c 	.word	0x2000038c
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b5e      	ldr	r3, [pc, #376]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a5d      	ldr	r2, [pc, #372]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b5b      	ldr	r3, [pc, #364]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a57      	ldr	r2, [pc, #348]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b55      	ldr	r3, [pc, #340]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b52      	ldr	r3, [pc, #328]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a51      	ldr	r2, [pc, #324]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a4b      	ldr	r2, [pc, #300]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <MX_GPIO_Init+0x190>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <MX_GPIO_Init+0x190>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a45      	ldr	r2, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x190>)
 8000a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <MX_GPIO_Init+0x190>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Status_Pin|Relay_Main_1_Pin|Relay_Main_2_Pin|LED3_Pin
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a1c:	483f      	ldr	r0, [pc, #252]	; (8000b1c <MX_GPIO_Init+0x194>)
 8000a1e:	f001 fcc5 	bl	80023ac <HAL_GPIO_WritePin>
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_Drogue_1_Pin|Relay_Drogue_2_Pin|NSS_1_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f001 fcbe 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a36:	483a      	ldr	r0, [pc, #232]	; (8000b20 <MX_GPIO_Init+0x198>)
 8000a38:	f001 fcb8 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRESET_1_GPIO_Port, NRESET_1_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4838      	ldr	r0, [pc, #224]	; (8000b24 <MX_GPIO_Init+0x19c>)
 8000a42:	f001 fcb3 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Status_Pin Relay_Main_1_Pin Relay_Main_2_Pin LED3_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED_Status_Pin|Relay_Main_1_Pin|Relay_Main_2_Pin|LED3_Pin
 8000a46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a4a:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482f      	ldr	r0, [pc, #188]	; (8000b1c <MX_GPIO_Init+0x194>)
 8000a60:	f001 fb1a 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Pin Main_Continuity_1_Pin */
  GPIO_InitStruct.Pin = Button_Pin|Main_Continuity_1_Pin;
 8000a64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4828      	ldr	r0, [pc, #160]	; (8000b1c <MX_GPIO_Init+0x194>)
 8000a7a:	f001 fb0d 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_Drogue_1_Pin Relay_Drogue_2_Pin NSS_1_Pin */
  GPIO_InitStruct.Pin = Relay_Drogue_1_Pin|Relay_Drogue_2_Pin|NSS_1_Pin;
 8000a7e:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f001 fafd 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pins : Drogue_Continuity_1_Pin Drogue_Continuity_2_Pin BUSY_1_Pin DIO1_1_Pin */
  GPIO_InitStruct.Pin = Drogue_Continuity_1_Pin|Drogue_Continuity_2_Pin|BUSY_1_Pin|DIO1_1_Pin;
 8000a9e:	f240 4331 	movw	r3, #1073	; 0x431
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481b      	ldr	r0, [pc, #108]	; (8000b20 <MX_GPIO_Init+0x198>)
 8000ab4:	f001 faf0 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_GPIO_Init+0x198>)
 8000ad2:	f001 fae1 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Continuity_2_Pin */
  GPIO_InitStruct.Pin = Main_Continuity_2_Pin;
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Main_Continuity_2_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f001 fad3 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRESET_1_Pin */
  GPIO_InitStruct.Pin = NRESET_1_Pin;
 8000af2:	2304      	movs	r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRESET_1_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x19c>)
 8000b0a:	f001 fac5 	bl	8002098 <HAL_GPIO_Init>

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000c00 	.word	0x48000c00

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x44>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f001 fa52 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b9c:	d12e      	bne.n	8000bfc <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <HAL_ADC_MspInit+0x140>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a45      	ldr	r2, [pc, #276]	; (8000cbc <HAL_ADC_MspInit+0x140>)
 8000ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ba8:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <HAL_ADC_MspInit+0x140>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bb0:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a42      	ldr	r2, [pc, #264]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6153      	str	r3, [r2, #20]
 8000bbc:	4b40      	ldr	r3, [pc, #256]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b3d      	ldr	r3, [pc, #244]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = Input_Sense_1_Pin;
 8000be0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Input_Sense_1_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4833      	ldr	r0, [pc, #204]	; (8000cc4 <HAL_ADC_MspInit+0x148>)
 8000bf6:	f001 fa4f 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000bfa:	e05b      	b.n	8000cb4 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <HAL_ADC_MspInit+0x14c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12d      	bne.n	8000c62 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_ADC_MspInit+0x140>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <HAL_ADC_MspInit+0x140>)
 8000c0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_ADC_MspInit+0x140>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10b      	bne.n	8000c30 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c22:	6153      	str	r3, [r2, #20]
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3a:	6153      	str	r3, [r2, #20]
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Main_Sense_1_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Main_Sense_1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <HAL_ADC_MspInit+0x148>)
 8000c5c:	f001 fa1c 	bl	8002098 <HAL_GPIO_Init>
}
 8000c60:	e028      	b.n	8000cb4 <HAL_ADC_MspInit+0x138>
  else if(hadc->Instance==ADC3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_ADC_MspInit+0x150>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d123      	bne.n	8000cb4 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c76:	6153      	str	r3, [r2, #20]
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	6153      	str	r3, [r2, #20]
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_ADC_MspInit+0x144>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Drogue_Sense_1_Pin;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Drogue_Sense_1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_ADC_MspInit+0x148>)
 8000cb0:	f001 f9f2 	bl	8002098 <HAL_GPIO_Init>
}
 8000cb4:	bf00      	nop
 8000cb6:	3738      	adds	r7, #56	; 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000003c 	.word	0x2000003c
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	50000100 	.word	0x50000100
 8000ccc:	50000400 	.word	0x50000400

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_I2C_MspInit+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d128      	bne.n	8000d44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x80>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_I2C_MspInit+0x80>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_I2C_MspInit+0x80>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	2312      	movs	r3, #18
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <HAL_I2C_MspInit+0x84>)
 8000d28:	f001 f9b6 	bl	8002098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x80>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0x80>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	61d3      	str	r3, [r2, #28]
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0x80>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_RTC_MspInit+0x44>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d111      	bne.n	8000d8e <HAL_RTC_MspInit+0x36>
 8000d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d6e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	fa93 f3a3 	rbit	r3, r3
 8000d76:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d78:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_RTC_MspInit+0x48>)
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40002800 	.word	0x40002800
 8000da0:	10908100 	.word	0x10908100

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <HAL_SPI_MspInit+0xdc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d129      	bne.n	8000e1a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a2e      	ldr	r2, [pc, #184]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000df6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	481d      	ldr	r0, [pc, #116]	; (8000e88 <HAL_SPI_MspInit+0xe4>)
 8000e14:	f001 f940 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e18:	e02d      	b.n	8000e76 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <HAL_SPI_MspInit+0xe8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d128      	bne.n	8000e76 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2e:	61d3      	str	r3, [r2, #28]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e46:	6153      	str	r3, [r2, #20]
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_SPI_MspInit+0xe0>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e66:	2306      	movs	r3, #6
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <HAL_SPI_MspInit+0xec>)
 8000e72:	f001 f911 	bl	8002098 <HAL_GPIO_Init>
}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	; 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40003800 	.word	0x40003800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	40003c00 	.word	0x40003c00
 8000e90:	48000800 	.word	0x48000800

08000e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d114      	bne.n	8000ed0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_TIM_Base_MspInit+0x68>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_TIM_Base_MspInit+0x68>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_TIM_Base_MspInit+0x68>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	201c      	movs	r0, #28
 8000ec4:	f001 f8b1 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec8:	201c      	movs	r0, #28
 8000eca:	f001 f8ca 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ece:	e010      	b.n	8000ef2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_TIM_Base_MspInit+0x6c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_TIM_Base_MspInit+0x68>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_TIM_Base_MspInit+0x68>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_TIM_Base_MspInit+0x68>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40000400 	.word	0x40000400

08000f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <HAL_TIM_MspPostInit+0x64>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d11c      	bne.n	8000f60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_TIM_MspPostInit+0x68>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_TIM_MspPostInit+0x68>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_TIM_MspPostInit+0x68>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f001 f89c 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a2e      	ldr	r2, [pc, #184]	; (8001048 <HAL_UART_MspInit+0xd8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a2d      	ldr	r2, [pc, #180]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a27      	ldr	r2, [pc, #156]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481c      	ldr	r0, [pc, #112]	; (8001050 <HAL_UART_MspInit+0xe0>)
 8000fde:	f001 f85b 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe2:	e02d      	b.n	8001040 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <HAL_UART_MspInit+0xe4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d128      	bne.n	8001040 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0xdc>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0xdc>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_UART_MspInit+0xdc>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0xdc>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800101e:	230c      	movs	r3, #12
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f001 f82c 	bl	8002098 <HAL_GPIO_Init>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013800 	.word	0x40013800
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400
 8001054:	40004400 	.word	0x40004400

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f88e 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM2_IRQHandler+0x10>)
 80010b2:	f003 f86d 	bl	8004190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000340 	.word	0x20000340

080010c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110e:	f7ff ffd7 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f004 fc9f 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff f85d 	bl	80001d4 <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800111c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001128:	08005b04 	.word	0x08005b04
  ldr r2, =_sbss
 800112c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001130:	20000878 	.word	0x20000878

08001134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_2_IRQHandler>
	...

08001138 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x28>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x28>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 ff63 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fcee 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 ff7b 	bl	800207e <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 ff43 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000410 	.word	0x20000410

080011ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000410 	.word	0x20000410

08001204 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09a      	sub	sp, #104	; 0x68
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e1e3      	b.n	80015ec <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	d176      	bne.n	8001324 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d152      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fc8f 	bl	8000b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d13b      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fda1 	bl	8001db4 <ADC_Disable>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d12f      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
 8001284:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001288:	2b00      	cmp	r3, #0
 800128a:	d12b      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001294:	f023 0302 	bic.w	r3, r3, #2
 8001298:	f043 0202 	orr.w	r2, r3, #2
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012c0:	4b92      	ldr	r3, [pc, #584]	; (800150c <HAL_ADC_Init+0x308>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a92      	ldr	r2, [pc, #584]	; (8001510 <HAL_ADC_Init+0x30c>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9a      	lsrs	r2, r3, #18
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d6:	e002      	b.n	80012de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3b01      	subs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f9      	bne.n	80012d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001300:	d110      	bne.n	8001324 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f023 0312 	bic.w	r3, r3, #18
 800130a:	f043 0210 	orr.w	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 8150 	bne.w	80015d2 <HAL_ADC_Init+0x3ce>
 8001332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 814b 	bne.w	80015d2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 8143 	bne.w	80015d2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001354:	f043 0202 	orr.w	r2, r3, #2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001364:	d004      	beq.n	8001370 <HAL_ADC_Init+0x16c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6a      	ldr	r2, [pc, #424]	; (8001514 <HAL_ADC_Init+0x310>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_ADC_Init+0x170>
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <HAL_ADC_Init+0x314>)
 8001372:	e000      	b.n	8001376 <HAL_ADC_Init+0x172>
 8001374:	4b69      	ldr	r3, [pc, #420]	; (800151c <HAL_ADC_Init+0x318>)
 8001376:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001380:	d102      	bne.n	8001388 <HAL_ADC_Init+0x184>
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_ADC_Init+0x310>)
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e01a      	b.n	80013be <HAL_ADC_Init+0x1ba>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a61      	ldr	r2, [pc, #388]	; (8001514 <HAL_ADC_Init+0x310>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d103      	bne.n	800139a <HAL_ADC_Init+0x196>
 8001392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	e011      	b.n	80013be <HAL_ADC_Init+0x1ba>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a60      	ldr	r2, [pc, #384]	; (8001520 <HAL_ADC_Init+0x31c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d102      	bne.n	80013aa <HAL_ADC_Init+0x1a6>
 80013a4:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_ADC_Init+0x320>)
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e009      	b.n	80013be <HAL_ADC_Init+0x1ba>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a5d      	ldr	r2, [pc, #372]	; (8001524 <HAL_ADC_Init+0x320>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d102      	bne.n	80013ba <HAL_ADC_Init+0x1b6>
 80013b4:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <HAL_ADC_Init+0x31c>)
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e001      	b.n	80013be <HAL_ADC_Init+0x1ba>
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_ADC_Init+0x1da>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x1da>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_ADC_Init+0x1dc>
 80013de:	2300      	movs	r3, #0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11c      	bne.n	800141e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013e4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d107      	bne.n	8001406 <HAL_ADC_Init+0x202>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Init+0x202>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_ADC_Init+0x204>
 8001406:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001408:	2b00      	cmp	r3, #0
 800140a:	d108      	bne.n	800141e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800140c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	431a      	orrs	r2, r3
 800141a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7e5b      	ldrb	r3, [r3, #25]
 8001422:	035b      	lsls	r3, r3, #13
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001428:	2a01      	cmp	r2, #1
 800142a:	d002      	beq.n	8001432 <HAL_ADC_Init+0x22e>
 800142c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001430:	e000      	b.n	8001434 <HAL_ADC_Init+0x230>
 8001432:	2200      	movs	r2, #0
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4313      	orrs	r3, r2
 8001442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001444:	4313      	orrs	r3, r2
 8001446:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d11b      	bne.n	800148a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7e5b      	ldrb	r3, [r3, #25]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	3b01      	subs	r3, #1
 8001460:	045a      	lsls	r2, r3, #17
 8001462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001464:	4313      	orrs	r3, r2
 8001466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146a:	663b      	str	r3, [r7, #96]	; 0x60
 800146c:	e00d      	b.n	800148a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001476:	f043 0220 	orr.w	r2, r3, #32
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	2b01      	cmp	r3, #1
 8001490:	d054      	beq.n	800153c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_ADC_Init+0x31c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d004      	beq.n	80014a6 <HAL_ADC_Init+0x2a2>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a20      	ldr	r2, [pc, #128]	; (8001524 <HAL_ADC_Init+0x320>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d140      	bne.n	8001528 <HAL_ADC_Init+0x324>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80014ae:	d02a      	beq.n	8001506 <HAL_ADC_Init+0x302>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b8:	d022      	beq.n	8001500 <HAL_ADC_Init+0x2fc>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80014c2:	d01a      	beq.n	80014fa <HAL_ADC_Init+0x2f6>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80014cc:	d012      	beq.n	80014f4 <HAL_ADC_Init+0x2f0>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80014d6:	d00a      	beq.n	80014ee <HAL_ADC_Init+0x2ea>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80014e0:	d002      	beq.n	80014e8 <HAL_ADC_Init+0x2e4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	e023      	b.n	8001530 <HAL_ADC_Init+0x32c>
 80014e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ec:	e020      	b.n	8001530 <HAL_ADC_Init+0x32c>
 80014ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014f2:	e01d      	b.n	8001530 <HAL_ADC_Init+0x32c>
 80014f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80014f8:	e01a      	b.n	8001530 <HAL_ADC_Init+0x32c>
 80014fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fe:	e017      	b.n	8001530 <HAL_ADC_Init+0x32c>
 8001500:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001504:	e014      	b.n	8001530 <HAL_ADC_Init+0x32c>
 8001506:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800150a:	e011      	b.n	8001530 <HAL_ADC_Init+0x32c>
 800150c:	20000000 	.word	0x20000000
 8001510:	431bde83 	.word	0x431bde83
 8001514:	50000100 	.word	0x50000100
 8001518:	50000300 	.word	0x50000300
 800151c:	50000700 	.word	0x50000700
 8001520:	50000400 	.word	0x50000400
 8001524:	50000500 	.word	0x50000500
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001534:	4313      	orrs	r3, r2
 8001536:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001538:	4313      	orrs	r3, r2
 800153a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d114      	bne.n	8001574 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001558:	f023 0302 	bic.w	r3, r3, #2
 800155c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e1b      	ldrb	r3, [r3, #24]
 8001562:	039a      	lsls	r2, r3, #14
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4313      	orrs	r3, r2
 800156e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001570:	4313      	orrs	r3, r2
 8001572:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_ADC_Init+0x3f0>)
 800157c:	4013      	ands	r3, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001584:	430b      	orrs	r3, r1
 8001586:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10c      	bne.n	80015aa <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f023 010f 	bic.w	r1, r3, #15
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	1e5a      	subs	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
 80015a8:	e007      	b.n	80015ba <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020f 	bic.w	r2, r2, #15
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f023 0303 	bic.w	r3, r3, #3
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
 80015d0:	e00a      	b.n	80015e8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f023 0312 	bic.w	r3, r3, #18
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3768      	adds	r7, #104	; 0x68
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	fff0c007 	.word	0xfff0c007

080015f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b09b      	sub	sp, #108	; 0x6c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_ADC_ConfigChannel+0x22>
 8001616:	2302      	movs	r3, #2
 8001618:	e2cb      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x5ba>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f040 82af 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d81c      	bhi.n	8001674 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	461a      	mov	r2, r3
 800164e:	231f      	movs	r3, #31
 8001650:	4093      	lsls	r3, r2
 8001652:	43db      	mvns	r3, r3
 8001654:	4019      	ands	r1, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
 8001672:	e063      	b.n	800173c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b09      	cmp	r3, #9
 800167a:	d81e      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	3b1e      	subs	r3, #30
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	4019      	ands	r1, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3b1e      	subs	r3, #30
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
 80016b8:	e040      	b.n	800173c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b0e      	cmp	r3, #14
 80016c0:	d81e      	bhi.n	8001700 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	3b3c      	subs	r3, #60	; 0x3c
 80016d6:	221f      	movs	r2, #31
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	4019      	ands	r1, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	3b3c      	subs	r3, #60	; 0x3c
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
 80016fe:	e01d      	b.n	800173c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3b5a      	subs	r3, #90	; 0x5a
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	4019      	ands	r1, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	3b5a      	subs	r3, #90	; 0x5a
 8001730:	fa00 f203 	lsl.w	r2, r0, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80e5 	bne.w	8001916 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b09      	cmp	r3, #9
 8001752:	d91c      	bls.n	800178e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6999      	ldr	r1, [r3, #24]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	3b1e      	subs	r3, #30
 8001766:	2207      	movs	r2, #7
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6898      	ldr	r0, [r3, #8]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	3b1e      	subs	r3, #30
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	e019      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6959      	ldr	r1, [r3, #20]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	2207      	movs	r2, #7
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4019      	ands	r1, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6898      	ldr	r0, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	3b01      	subs	r3, #1
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d84f      	bhi.n	8001884 <HAL_ADC_ConfigChannel+0x28c>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_ADC_ConfigChannel+0x1f4>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	0800181f 	.word	0x0800181f
 80017f4:	08001841 	.word	0x08001841
 80017f8:	08001863 	.word	0x08001863
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001802:	4b9f      	ldr	r3, [pc, #636]	; (8001a80 <HAL_ADC_ConfigChannel+0x488>)
 8001804:	4013      	ands	r3, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	0691      	lsls	r1, r2, #26
 800180c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800180e:	430a      	orrs	r2, r1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800181a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800181c:	e07e      	b.n	800191c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001824:	4b96      	ldr	r3, [pc, #600]	; (8001a80 <HAL_ADC_ConfigChannel+0x488>)
 8001826:	4013      	ands	r3, r2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	0691      	lsls	r1, r2, #26
 800182e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001830:	430a      	orrs	r2, r1
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800183c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800183e:	e06d      	b.n	800191c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_ADC_ConfigChannel+0x488>)
 8001848:	4013      	ands	r3, r2
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	0691      	lsls	r1, r2, #26
 8001850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001852:	430a      	orrs	r2, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800185e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001860:	e05c      	b.n	800191c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001868:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <HAL_ADC_ConfigChannel+0x488>)
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	0691      	lsls	r1, r2, #26
 8001872:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001874:	430a      	orrs	r2, r1
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001880:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001882:	e04b      	b.n	800191c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	069b      	lsls	r3, r3, #26
 8001894:	429a      	cmp	r2, r3
 8001896:	d107      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	069b      	lsls	r3, r3, #26
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	069b      	lsls	r3, r3, #26
 80018dc:	429a      	cmp	r2, r3
 80018de:	d107      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	069b      	lsls	r3, r3, #26
 8001900:	429a      	cmp	r2, r3
 8001902:	d10a      	bne.n	800191a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001912:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001914:	e001      	b.n	800191a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <HAL_ADC_ConfigChannel+0x324>
      break;
 800191a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d108      	bne.n	800193c <HAL_ADC_ConfigChannel+0x344>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_ADC_ConfigChannel+0x344>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_ADC_ConfigChannel+0x346>
 800193c:	2300      	movs	r3, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 8131 	bne.w	8001ba6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d00f      	beq.n	800196c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800196a:	e049      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b09      	cmp	r3, #9
 800198c:	d91c      	bls.n	80019c8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6999      	ldr	r1, [r3, #24]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	3b1b      	subs	r3, #27
 80019a0:	2207      	movs	r2, #7
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4019      	ands	r1, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6898      	ldr	r0, [r3, #8]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	3b1b      	subs	r3, #27
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	619a      	str	r2, [r3, #24]
 80019c6:	e01b      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6959      	ldr	r1, [r3, #20]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4019      	ands	r1, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6898      	ldr	r0, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	fa00 f203 	lsl.w	r2, r0, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a08:	d004      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0x41c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_ADC_ConfigChannel+0x48c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x420>
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_ADC_ConfigChannel+0x490>)
 8001a16:	e000      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x422>
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_ADC_ConfigChannel+0x494>)
 8001a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a34:	2b11      	cmp	r3, #17
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	f040 80ac 	bne.w	8001ba6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 80a5 	bne.w	8001ba6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a64:	d102      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x474>
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_ADC_ConfigChannel+0x48c>)
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e023      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4bc>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_ADC_ConfigChannel+0x48c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10c      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x498>
 8001a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e01a      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4bc>
 8001a7e:	bf00      	nop
 8001a80:	83fff000 	.word	0x83fff000
 8001a84:	50000100 	.word	0x50000100
 8001a88:	50000300 	.word	0x50000300
 8001a8c:	50000700 	.word	0x50000700
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d102      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x4a8>
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e009      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4bc>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a47      	ldr	r2, [pc, #284]	; (8001bc4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x4b8>
 8001aaa:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e001      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x4bc>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x4dc>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x4dc>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x4de>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d150      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x504>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x504>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_ADC_ConfigChannel+0x506>
 8001afc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d13c      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d11d      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x54e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b12:	d118      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_ADC_ConfigChannel+0x5d4>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b36:	e002      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b44:	e02e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d10b      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x56e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b56:	d106      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b62:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b64:	e01e      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d11a      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b78:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b7a:	e013      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b8e:	e00a      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ba2:	e000      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ba4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	376c      	adds	r7, #108	; 0x6c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	50000400 	.word	0x50000400
 8001bc4:	50000500 	.word	0x50000500
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b099      	sub	sp, #100	; 0x64
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d102      	bne.n	8001bf0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	e01a      	b.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d103      	bne.n	8001c02 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001bfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	e011      	b.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	e009      	b.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d102      	bne.n	8001c22 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	e001      	b.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b0      	b.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e0a9      	b.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 808d 	bne.w	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8086 	bne.w	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6c:	d004      	beq.n	8001c78 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c7a:	e000      	b.n	8001c7e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c7c:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c7e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d040      	beq.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9a:	035b      	lsls	r3, r3, #13
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d15c      	bne.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ce6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d14b      	bne.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cf4:	f023 030f 	bic.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6892      	ldr	r2, [r2, #8]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d06:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d08:	e03c      	b.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d14:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d108      	bne.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d123      	bne.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d58:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d112      	bne.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d66:	f023 030f 	bic.w	r3, r3, #15
 8001d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d6c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d6e:	e009      	b.n	8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f043 0220 	orr.w	r2, r3, #32
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d82:	e000      	b.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d84:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001d92:	4618      	mov	r0, r3
 8001d94:	3764      	adds	r7, #100	; 0x64
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	50000100 	.word	0x50000100
 8001da4:	50000400 	.word	0x50000400
 8001da8:	50000500 	.word	0x50000500
 8001dac:	50000300 	.word	0x50000300
 8001db0:	50000700 	.word	0x50000700

08001db4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <ADC_Disable+0x2c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <ADC_Disable+0x2c>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <ADC_Disable+0x2e>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d040      	beq.n	8001e68 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030d 	and.w	r3, r3, #13
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10f      	bne.n	8001e14 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0202 	orr.w	r2, r2, #2
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff f9ee 	bl	80011ec <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e12:	e022      	b.n	8001e5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e01c      	b.n	8001e6a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e30:	f7ff f9dc 	bl	80011ec <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d90d      	bls.n	8001e5a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d0e3      	beq.n	8001e30 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	e160      	b.n	800236a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8152 	beq.w	8002364 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d00b      	beq.n	80020e0 <HAL_GPIO_Init+0x48>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d4:	2b11      	cmp	r3, #17
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d130      	bne.n	8002142 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002116:	2201      	movs	r2, #1
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 0201 	and.w	r2, r3, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0xea>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b12      	cmp	r3, #18
 8002180:	d123      	bne.n	80021ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	08da      	lsrs	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3208      	adds	r2, #8
 800218a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	6939      	ldr	r1, [r7, #16]
 80021c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0203 	and.w	r2, r3, #3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80ac 	beq.w	8002364 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220c:	4b5e      	ldr	r3, [pc, #376]	; (8002388 <HAL_GPIO_Init+0x2f0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <HAL_GPIO_Init+0x2f0>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <HAL_GPIO_Init+0x2f0>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002224:	4a59      	ldr	r2, [pc, #356]	; (800238c <HAL_GPIO_Init+0x2f4>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800224e:	d025      	beq.n	800229c <HAL_GPIO_Init+0x204>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a4f      	ldr	r2, [pc, #316]	; (8002390 <HAL_GPIO_Init+0x2f8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01f      	beq.n	8002298 <HAL_GPIO_Init+0x200>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a4e      	ldr	r2, [pc, #312]	; (8002394 <HAL_GPIO_Init+0x2fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d019      	beq.n	8002294 <HAL_GPIO_Init+0x1fc>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a4d      	ldr	r2, [pc, #308]	; (8002398 <HAL_GPIO_Init+0x300>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_GPIO_Init+0x1f8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a4c      	ldr	r2, [pc, #304]	; (800239c <HAL_GPIO_Init+0x304>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x1f4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4b      	ldr	r2, [pc, #300]	; (80023a0 <HAL_GPIO_Init+0x308>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1f0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4a      	ldr	r2, [pc, #296]	; (80023a4 <HAL_GPIO_Init+0x30c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x1ec>
 8002280:	2306      	movs	r3, #6
 8002282:	e00c      	b.n	800229e <HAL_GPIO_Init+0x206>
 8002284:	2307      	movs	r3, #7
 8002286:	e00a      	b.n	800229e <HAL_GPIO_Init+0x206>
 8002288:	2305      	movs	r3, #5
 800228a:	e008      	b.n	800229e <HAL_GPIO_Init+0x206>
 800228c:	2304      	movs	r3, #4
 800228e:	e006      	b.n	800229e <HAL_GPIO_Init+0x206>
 8002290:	2303      	movs	r3, #3
 8002292:	e004      	b.n	800229e <HAL_GPIO_Init+0x206>
 8002294:	2302      	movs	r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x206>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_GPIO_Init+0x206>
 800229c:	2300      	movs	r3, #0
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	f002 0203 	and.w	r2, r2, #3
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	4093      	lsls	r3, r2
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ae:	4937      	ldr	r1, [pc, #220]	; (800238c <HAL_GPIO_Init+0x2f4>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <HAL_GPIO_Init+0x310>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <HAL_GPIO_Init+0x310>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_GPIO_Init+0x310>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800230a:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_GPIO_Init+0x310>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_GPIO_Init+0x310>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002334:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_GPIO_Init+0x310>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_GPIO_Init+0x310>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_GPIO_Init+0x310>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f ae97 	bne.w	80020a8 <HAL_GPIO_Init+0x10>
  }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800
 8002398:	48000c00 	.word	0x48000c00
 800239c:	48001000 	.word	0x48001000
 80023a0:	48001400 	.word	0x48001400
 80023a4:	48001800 	.word	0x48001800
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e081      	b.n	80024f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fc64 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800243c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	e006      	b.n	8002464 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002462:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d104      	bne.n	8002476 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002474:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002488:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002498:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	ea42 0103 	orr.w	r1, r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	021a      	lsls	r2, r3, #8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69d9      	ldr	r1, [r3, #28]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b20      	cmp	r3, #32
 800250e:	d138      	bne.n	8002582 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800251a:	2302      	movs	r3, #2
 800251c:	e032      	b.n	8002584 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2224      	movs	r2, #36	; 0x24
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800254c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d139      	bne.n	800261a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e033      	b.n	800261c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800262e:	af00      	add	r7, sp, #0
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f000 bf01 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8160 	beq.w	8002912 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002652:	4bae      	ldr	r3, [pc, #696]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00c      	beq.n	8002678 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800265e:	4bab      	ldr	r3, [pc, #684]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d159      	bne.n	800271e <HAL_RCC_OscConfig+0xf6>
 800266a:	4ba8      	ldr	r3, [pc, #672]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002676:	d152      	bne.n	800271e <HAL_RCC_OscConfig+0xf6>
 8002678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800267c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800268c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_RCC_OscConfig+0x82>
 80026a4:	4b99      	ldr	r3, [pc, #612]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0xae>
 80026aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80026be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026d2:	4b8e      	ldr	r3, [pc, #568]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026da:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80026de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80026ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8102 	beq.w	8002910 <HAL_RCC_OscConfig+0x2e8>
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 80fc 	bne.w	8002910 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f000 be93 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x110>
 800272a:	4b78      	ldr	r3, [pc, #480]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a77      	ldr	r2, [pc, #476]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e030      	b.n	800279a <HAL_RCC_OscConfig+0x172>
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x134>
 8002742:	4b72      	ldr	r3, [pc, #456]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a71      	ldr	r2, [pc, #452]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01e      	b.n	800279a <HAL_RCC_OscConfig+0x172>
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002766:	d10c      	bne.n	8002782 <HAL_RCC_OscConfig+0x15a>
 8002768:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a67      	ldr	r2, [pc, #412]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 800276e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b65      	ldr	r3, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a64      	ldr	r2, [pc, #400]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x172>
 8002782:	4b62      	ldr	r3, [pc, #392]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a61      	ldr	r2, [pc, #388]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b5f      	ldr	r3, [pc, #380]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5e      	ldr	r2, [pc, #376]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d059      	beq.n	8002858 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fd22 	bl	80011ec <HAL_GetTick>
 80027a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ae:	f7fe fd1d 	bl	80011ec <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d902      	bls.n	80027c4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f000 be40 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>
 80027c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80027d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1ce>
 80027f0:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x1fa>
 80027f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800280a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002812:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002826:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800282a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800282e:	fa92 f2a2 	rbit	r2, r2
 8002832:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002836:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800283a:	fab2 f282 	clz	r2, r2
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f042 0220 	orr.w	r2, r2, #32
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ab      	beq.n	80027ae <HAL_RCC_OscConfig+0x186>
 8002856:	e05c      	b.n	8002912 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fcc8 	bl	80011ec <HAL_GetTick>
 800285c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002862:	f7fe fcc3 	bl	80011ec <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d902      	bls.n	8002878 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	f000 bde6 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800288c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_OscConfig+0x282>
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x2ae>
 80028aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80028be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80028c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCC_OscConfig+0x2e4>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80028de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80028e2:	fa92 f2a2 	rbit	r2, r2
 80028e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80028ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028ee:	fab2 f282 	clz	r2, r2
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f042 0220 	orr.w	r2, r2, #32
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ab      	bne.n	8002862 <HAL_RCC_OscConfig+0x23a>
 800290a:	e002      	b.n	8002912 <HAL_RCC_OscConfig+0x2ea>
 800290c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8170 	beq.w	8002c02 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002922:	4bd0      	ldr	r3, [pc, #832]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800292e:	4bcd      	ldr	r3, [pc, #820]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d16d      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3ee>
 800293a:	4bca      	ldr	r3, [pc, #808]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002946:	d166      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3ee>
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800295a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d102      	bne.n	8002978 <HAL_RCC_OscConfig+0x350>
 8002972:	4bbc      	ldr	r3, [pc, #752]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	e013      	b.n	80029a0 <HAL_RCC_OscConfig+0x378>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002990:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800299c:	4bb1      	ldr	r3, [pc, #708]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2202      	movs	r2, #2
 80029a2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80029a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80029aa:	fa92 f2a2 	rbit	r2, r2
 80029ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80029b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f042 0220 	orr.w	r2, r2, #32
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f002 021f 	and.w	r2, r2, #31
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3ba>
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	f000 bd31 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4ba0      	ldr	r3, [pc, #640]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	21f8      	movs	r1, #248	; 0xf8
 80029f2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80029fa:	fa91 f1a1 	rbit	r1, r1
 80029fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002a02:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a06:	fab1 f181 	clz	r1, r1
 8002a0a:	b2c9      	uxtb	r1, r1
 8002a0c:	408b      	lsls	r3, r1
 8002a0e:	4995      	ldr	r1, [pc, #596]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a14:	e0f5      	b.n	8002c02 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8085 	beq.w	8002b2c <HAL_RCC_OscConfig+0x504>
 8002a22:	2301      	movs	r3, #1
 8002a24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002a34:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fbcd 	bl	80011ec <HAL_GetTick>
 8002a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fbc8 	bl	80011ec <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d902      	bls.n	8002a6e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f000 bceb 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a80:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0x476>
 8002a98:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e013      	b.n	8002ac6 <HAL_RCC_OscConfig+0x49e>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ab6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ac2:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002acc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002ad8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002adc:	fab2 f282 	clz	r2, r2
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f042 0220 	orr.w	r2, r2, #32
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f002 021f 	and.w	r2, r2, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0af      	beq.n	8002a58 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b5a      	ldr	r3, [pc, #360]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	21f8      	movs	r1, #248	; 0xf8
 8002b08:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002b10:	fa91 f1a1 	rbit	r1, r1
 8002b14:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002b18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b1c:	fab1 f181 	clz	r1, r1
 8002b20:	b2c9      	uxtb	r1, r1
 8002b22:	408b      	lsls	r3, r1
 8002b24:	494f      	ldr	r1, [pc, #316]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
 8002b2a:	e06a      	b.n	8002c02 <HAL_RCC_OscConfig+0x5da>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002b3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fb48 	bl	80011ec <HAL_GetTick>
 8002b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fe fb43 	bl	80011ec <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	f000 bc66 	b.w	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x580>
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCC_OscConfig+0x5a8>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bba:	2302      	movs	r3, #2
 8002bbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bcc:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_RCC_OscConfig+0x63c>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002bd6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002bda:	fa92 f2a2 	rbit	r2, r2
 8002bde:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002be2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0220 	orr.w	r2, r2, #32
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1af      	bne.n	8002b62 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80da 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d069      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x6c8>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x640>)
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	461a      	mov	r2, r3
 8002c42:	2301      	movs	r3, #1
 8002c44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c46:	f7fe fad1 	bl	80011ec <HAL_GetTick>
 8002c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e00d      	b.n	8002c6c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe facc 	bl	80011ec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d905      	bls.n	8002c6c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e3ef      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	10908120 	.word	0x10908120
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c84:	2202      	movs	r2, #2
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb0:	4ba4      	ldr	r3, [pc, #656]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cb8:	2102      	movs	r1, #2
 8002cba:	6019      	str	r1, [r3, #0]
 8002cbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f1a3 	rbit	r1, r3
 8002cc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cca:	6019      	str	r1, [r3, #0]
  return result;
 8002ccc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0b0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x628>
 8002cee:	e06a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x79e>
 8002cf0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d06:	601a      	str	r2, [r3, #0]
  return result;
 8002d08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d0c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x920>)
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fa63 	bl	80011ec <HAL_GetTick>
 8002d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2a:	e009      	b.n	8002d40 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fa5e 	bl	80011ec <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e381      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002d40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d44:	2202      	movs	r2, #2
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d74:	2202      	movs	r2, #2
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002d86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d90:	2102      	movs	r1, #2
 8002d92:	6019      	str	r1, [r3, #0]
 8002d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f1a3 	rbit	r1, r3
 8002d9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002da2:	6019      	str	r1, [r3, #0]
  return result;
 8002da4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1b2      	bne.n	8002d2c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8157 	beq.w	8003084 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d112      	bne.n	8002e0e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a55      	ldr	r2, [pc, #340]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCC_OscConfig+0x924>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11a      	bne.n	8002e50 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_OscConfig+0x924>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_RCC_OscConfig+0x924>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe f9e1 	bl	80011ec <HAL_GetTick>
 8002e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	e009      	b.n	8002e44 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe f9dc 	bl	80011ec <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e2ff      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_OscConfig+0x924>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x840>
 8002e5a:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a39      	ldr	r2, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	e02f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a0>
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x864>
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a0>
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x888>
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6213      	str	r3, [r2, #32]
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x8a0>
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a23      	ldr	r2, [pc, #140]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d06a      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f98b 	bl	80011ec <HAL_GetTick>
 8002ed6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe f986 	bl	80011ec <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e2a7      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002ef4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ef8:	2202      	movs	r2, #2
 8002efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f10:	2202      	movs	r2, #2
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f22:	601a      	str	r2, [r3, #0]
  return result;
 8002f24:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002f28:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d108      	bne.n	8002f50 <HAL_RCC_OscConfig+0x928>
 8002f3e:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <HAL_RCC_OscConfig+0x91c>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	e013      	b.n	8002f6c <HAL_RCC_OscConfig+0x944>
 8002f44:	40021000 	.word	0x40021000
 8002f48:	10908120 	.word	0x10908120
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f54:	2202      	movs	r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4bc0      	ldr	r3, [pc, #768]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f70:	2102      	movs	r1, #2
 8002f72:	6011      	str	r1, [r2, #0]
 8002f74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	fa92 f1a2 	rbit	r1, r2
 8002f7e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f82:	6011      	str	r1, [r2, #0]
  return result;
 8002f84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d09a      	beq.n	8002edc <HAL_RCC_OscConfig+0x8b4>
 8002fa6:	e063      	b.n	8003070 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe f920 	bl	80011ec <HAL_GetTick>
 8002fac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb0:	e00b      	b.n	8002fca <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe f91b 	bl	80011ec <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e23c      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 8002fca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fce:	2202      	movs	r2, #2
 8002fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa93 f2a3 	rbit	r2, r3
 8002fdc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ff8:	601a      	str	r2, [r3, #0]
  return result;
 8002ffa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d102      	bne.n	800301a <HAL_RCC_OscConfig+0x9f2>
 8003014:	4b95      	ldr	r3, [pc, #596]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	e00d      	b.n	8003036 <HAL_RCC_OscConfig+0xa0e>
 800301a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800301e:	2202      	movs	r2, #2
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b8e      	ldr	r3, [pc, #568]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800303a:	2102      	movs	r1, #2
 800303c:	6011      	str	r1, [r2, #0]
 800303e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	fa92 f1a2 	rbit	r1, r2
 8003048:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800304c:	6011      	str	r1, [r2, #0]
  return result;
 800304e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1a0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003070:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b7c      	ldr	r3, [pc, #496]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	4a7b      	ldr	r2, [pc, #492]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81d9 	beq.w	8003442 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	f000 81a6 	beq.w	80033ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f040 811e 	bne.w	80032e6 <HAL_RCC_OscConfig+0xcbe>
 80030aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80030ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030c2:	601a      	str	r2, [r3, #0]
  return result;
 80030c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80030c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe f884 	bl	80011ec <HAL_GetTick>
 80030e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	e009      	b.n	80030fe <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe f87f 	bl	80011ec <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1a2      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 80030fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	fa93 f2a3 	rbit	r2, r3
 8003112:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800311c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0xb10>
 8003132:	4b4e      	ldr	r3, [pc, #312]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0xb48>
 8003138:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800313c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	4b3f      	ldr	r3, [pc, #252]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003178:	6011      	str	r1, [r2, #0]
 800317a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	fa92 f1a2 	rbit	r1, r2
 8003184:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003188:	6011      	str	r1, [r2, #0]
  return result;
 800318a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	f002 021f 	and.w	r2, r2, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d19e      	bne.n	80030ea <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	f023 020f 	bic.w	r2, r3, #15
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	492c      	ldr	r1, [pc, #176]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	62cb      	str	r3, [r1, #44]	; 0x2c
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a19      	ldr	r1, [r3, #32]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	4925      	ldr	r1, [pc, #148]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031f4:	601a      	str	r2, [r3, #0]
  return result;
 80031f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031fa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003206:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	461a      	mov	r2, r3
 800320e:	2301      	movs	r3, #1
 8003210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fd ffeb 	bl	80011ec <HAL_GetTick>
 8003216:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800321a:	e009      	b.n	8003230 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fd ffe6 	bl	80011ec <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e109      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 8003230:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003248:	601a      	str	r2, [r3, #0]
  return result;
 800324a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800324e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0xc48>
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <HAL_RCC_OscConfig+0xc44>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e01e      	b.n	80032a8 <HAL_RCC_OscConfig+0xc80>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800328e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_OscConfig+0xe28>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80032ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	fa92 f1a2 	rbit	r1, r2
 80032bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032c0:	6011      	str	r1, [r2, #0]
  return result;
 80032c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d09b      	beq.n	800321c <HAL_RCC_OscConfig+0xbf4>
 80032e4:	e0ad      	b.n	8003442 <HAL_RCC_OscConfig+0xe1a>
 80032e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032fe:	601a      	str	r2, [r3, #0]
  return result;
 8003300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003304:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	461a      	mov	r2, r3
 8003318:	2300      	movs	r3, #0
 800331a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fd ff66 	bl	80011ec <HAL_GetTick>
 8003320:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003324:	e009      	b.n	800333a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fd ff61 	bl	80011ec <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e084      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
 800333a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800333e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	fa93 f2a3 	rbit	r2, r3
 800334e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003352:	601a      	str	r2, [r3, #0]
  return result;
 8003354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003358:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_RCC_OscConfig+0xd4c>
 800336e:	4b38      	ldr	r3, [pc, #224]	; (8003450 <HAL_RCC_OscConfig+0xe28>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e01b      	b.n	80033ac <HAL_RCC_OscConfig+0xd84>
 8003374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fa93 f2a3 	rbit	r2, r3
 8003388:	f107 0320 	add.w	r3, r7, #32
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f107 0318 	add.w	r3, r7, #24
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_OscConfig+0xe28>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f107 0214 	add.w	r2, r7, #20
 80033b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033b4:	6011      	str	r1, [r2, #0]
 80033b6:	f107 0214 	add.w	r2, r7, #20
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	fa92 f1a2 	rbit	r1, r2
 80033c0:	f107 0210 	add.w	r2, r7, #16
 80033c4:	6011      	str	r1, [r2, #0]
  return result;
 80033c6:	f107 0210 	add.w	r2, r7, #16
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f002 021f 	and.w	r2, r2, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d19e      	bne.n	8003326 <HAL_RCC_OscConfig+0xcfe>
 80033e8:	e02b      	b.n	8003442 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e025      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_RCC_OscConfig+0xe28>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_RCC_OscConfig+0xe28>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003408:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800340c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	429a      	cmp	r2, r3
 8003418:	d111      	bne.n	800343e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800341a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800341e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003428:	429a      	cmp	r2, r3
 800342a:	d108      	bne.n	800343e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800342c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003430:	f003 020f 	and.w	r2, r3, #15
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b09e      	sub	sp, #120	; 0x78
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e162      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	498b      	ldr	r1, [pc, #556]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e14a      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	497f      	ldr	r1, [pc, #508]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80dc 	beq.w	8003680 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d13c      	bne.n	800354a <HAL_RCC_ClockConfig+0xf6>
 80034d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_ClockConfig+0xa6>
 80034f4:	4b6f      	ldr	r3, [pc, #444]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	e00f      	b.n	800351a <HAL_RCC_ClockConfig+0xc6>
 80034fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
 8003508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350c:	663b      	str	r3, [r7, #96]	; 0x60
 800350e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800351e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003522:	fa92 f2a2 	rbit	r2, r2
 8003526:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800352a:	fab2 f282 	clz	r2, r2
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f042 0220 	orr.w	r2, r2, #32
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f002 021f 	and.w	r2, r2, #31
 800353a:	2101      	movs	r1, #1
 800353c:	fa01 f202 	lsl.w	r2, r1, r2
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d17b      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0f3      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d13c      	bne.n	80035cc <HAL_RCC_ClockConfig+0x178>
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_ClockConfig+0x128>
 8003576:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e00f      	b.n	800359c <HAL_RCC_ClockConfig+0x148>
 800357c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
 8003590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80035a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a4:	fa92 f2a2 	rbit	r2, r2
 80035a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d13a      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b2      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
 80035cc:	2302      	movs	r3, #2
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d102      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	e00d      	b.n	8003610 <HAL_RCC_ClockConfig+0x1bc>
 80035f4:	2302      	movs	r3, #2
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	2302      	movs	r3, #2
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	61ba      	str	r2, [r7, #24]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	617a      	str	r2, [r7, #20]
  return result;
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	fab2 f282 	clz	r2, r2
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f002 021f 	and.w	r2, r2, #31
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e079      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f023 0203 	bic.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	491a      	ldr	r1, [pc, #104]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003650:	f7fd fdcc 	bl	80011ec <HAL_GetTick>
 8003654:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	e00a      	b.n	800366e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fd fdc8 	bl	80011ec <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e061      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 020c 	and.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	429a      	cmp	r2, r3
 800367e:	d1eb      	bne.n	8003658 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d214      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4906      	ldr	r1, [pc, #24]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e040      	b.n	8003732 <HAL_RCC_ClockConfig+0x2de>
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	491a      	ldr	r1, [pc, #104]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4912      	ldr	r1, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036f6:	f000 f829 	bl	800374c <HAL_RCC_GetSysClockFreq>
 80036fa:	4601      	mov	r1, r0
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_RCC_ClockConfig+0x2e8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	22f0      	movs	r2, #240	; 0xf0
 8003706:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	fa92 f2a2 	rbit	r2, r2
 800370e:	60fa      	str	r2, [r7, #12]
  return result;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	40d3      	lsrs	r3, r2
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x2ec>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	fa21 f303 	lsr.w	r3, r1, r3
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_RCC_ClockConfig+0x2f0>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCC_ClockConfig+0x2f4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fd1a 	bl	8001164 <HAL_InitTick>
  
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3778      	adds	r7, #120	; 0x78
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	08005ac4 	.word	0x08005ac4
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b08b      	sub	sp, #44	; 0x2c
 8003750:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003766:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d002      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x30>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d003      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x36>
 800377a:	e03f      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_RCC_GetSysClockFreq+0xc8>)
 800377e:	623b      	str	r3, [r7, #32]
      break;
 8003780:	e03f      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003788:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800378c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	607a      	str	r2, [r7, #4]
  return result;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	40d3      	lsrs	r3, r2
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80037a6:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	220f      	movs	r2, #15
 80037b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	60fa      	str	r2, [r7, #12]
  return result;
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	40d3      	lsrs	r3, r2
 80037c4:	4a15      	ldr	r2, [pc, #84]	; (800381c <HAL_RCC_GetSysClockFreq+0xd0>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037d4:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e007      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	623b      	str	r3, [r7, #32]
      break;
 80037fa:	e002      	b.n	8003802 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037fe:	623b      	str	r3, [r7, #32]
      break;
 8003800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003802:	6a3b      	ldr	r3, [r7, #32]
}
 8003804:	4618      	mov	r0, r3
 8003806:	372c      	adds	r7, #44	; 0x2c
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40021000 	.word	0x40021000
 8003814:	00f42400 	.word	0x00f42400
 8003818:	08005adc 	.word	0x08005adc
 800381c:	08005aec 	.word	0x08005aec
 8003820:	007a1200 	.word	0x007a1200

08003824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_RCC_GetHCLKFreq+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000

0800383c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003842:	f7ff ffef 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8003846:	4601      	mov	r1, r0
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003850:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003854:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	fa92 f2a2 	rbit	r2, r2
 800385c:	603a      	str	r2, [r7, #0]
  return result;
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	fab2 f282 	clz	r2, r2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	40d3      	lsrs	r3, r2
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_RCC_GetPCLK1Freq+0x40>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	08005ad4 	.word	0x08005ad4

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003886:	f7ff ffcd 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 800388a:	4601      	mov	r1, r0
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003894:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003898:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	fa92 f2a2 	rbit	r2, r2
 80038a0:	603a      	str	r2, [r7, #0]
  return result;
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	fab2 f282 	clz	r2, r2
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	40d3      	lsrs	r3, r2
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08005ad4 	.word	0x08005ad4

080038c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b092      	sub	sp, #72	; 0x48
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80d4 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e8:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10e      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	61d3      	str	r3, [r2, #28]
 8003900:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b45      	ldr	r3, [pc, #276]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b42      	ldr	r3, [pc, #264]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a41      	ldr	r2, [pc, #260]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fd fc5f 	bl	80011ec <HAL_GetTick>
 800392e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fd fc5b 	bl	80011ec <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b64      	cmp	r3, #100	; 0x64
 800393e:	d901      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e1d6      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003950:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8084 	beq.w	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800396c:	429a      	cmp	r2, r3
 800396e:	d07c      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003970:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	461a      	mov	r2, r3
 800399a:	2301      	movs	r3, #1
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d04b      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fd fc0b 	bl	80011ec <HAL_GetTick>
 80039d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd fc07 	bl	80011ec <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e180      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039f0:	2302      	movs	r3, #2
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	2302      	movs	r3, #2
 80039fe:	623b      	str	r3, [r7, #32]
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	61fb      	str	r3, [r7, #28]
  return result;
 8003a08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d108      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a1e:	4b01      	ldr	r3, [pc, #4]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	e00d      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	10908100 	.word	0x10908100
 8003a30:	2302      	movs	r3, #2
 8003a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	4ba0      	ldr	r3, [pc, #640]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2202      	movs	r2, #2
 8003a42:	613a      	str	r2, [r7, #16]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	fa92 f2a2 	rbit	r2, r2
 8003a4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	fab2 f282 	clz	r2, r2
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	f002 021f 	and.w	r2, r2, #31
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0b7      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a6a:	4b95      	ldr	r3, [pc, #596]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4992      	ldr	r1, [pc, #584]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b8e      	ldr	r3, [pc, #568]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a9c:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f023 0203 	bic.w	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4985      	ldr	r1, [pc, #532]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aba:	4b81      	ldr	r3, [pc, #516]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	497e      	ldr	r1, [pc, #504]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ad8:	4b79      	ldr	r3, [pc, #484]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	4976      	ldr	r1, [pc, #472]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af6:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f023 0210 	bic.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	496f      	ldr	r1, [pc, #444]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b14:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	4967      	ldr	r1, [pc, #412]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b32:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f023 0220 	bic.w	r2, r3, #32
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4960      	ldr	r1, [pc, #384]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b50:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	4958      	ldr	r1, [pc, #352]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4951      	ldr	r1, [pc, #324]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b8c:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4949      	ldr	r1, [pc, #292]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003baa:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4942      	ldr	r1, [pc, #264]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bc8:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	493a      	ldr	r1, [pc, #232]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4933      	ldr	r1, [pc, #204]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	492b      	ldr	r1, [pc, #172]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c22:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4924      	ldr	r1, [pc, #144]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	491c      	ldr	r1, [pc, #112]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	4915      	ldr	r1, [pc, #84]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cb8:	4b01      	ldr	r3, [pc, #4]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	490b      	ldr	r1, [pc, #44]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	4904      	ldr	r1, [pc, #16]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3748      	adds	r7, #72	; 0x48
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e083      	b.n	8003e1a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7f5b      	ldrb	r3, [r3, #29]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd f818 	bl	8000d58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	22ca      	movs	r2, #202	; 0xca
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2253      	movs	r2, #83	; 0x53
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f897 	bl	8003e72 <RTC_EnterInitMode>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	22ff      	movs	r2, #255	; 0xff
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2204      	movs	r2, #4
 8003d56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e05e      	b.n	8003e1a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6919      	ldr	r1, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	041a      	lsls	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10e      	bne.n	8003de8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f829 	bl	8003e22 <HAL_RTC_WaitForSynchro>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e018      	b.n	8003e1a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	22ff      	movs	r2, #255	; 0xff
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e3c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003e3e:	f7fd f9d5 	bl	80011ec <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e44:	e009      	b.n	8003e5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e46:	f7fd f9d1 	bl	80011ec <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e54:	d901      	bls.n	8003e5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e007      	b.n	8003e6a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ee      	beq.n	8003e46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d119      	bne.n	8003ec0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e96:	f7fd f9a9 	bl	80011ec <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e9c:	e009      	b.n	8003eb2 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e9e:	f7fd f9a5 	bl	80011ec <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eac:	d901      	bls.n	8003eb2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e007      	b.n	8003ec2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ee      	beq.n	8003e9e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e09d      	b.n	8004018 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eec:	d009      	beq.n	8003f02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	61da      	str	r2, [r3, #28]
 8003ef4:	e005      	b.n	8003f02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fc ff41 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f42:	d902      	bls.n	8003f4a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e002      	b.n	8003f50 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f58:	d007      	beq.n	8003f6a <HAL_SPI_Init+0xa0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f62:	d002      	beq.n	8003f6a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	ea42 0103 	orr.w	r1, r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0204 	and.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003fe6:	ea42 0103 	orr.w	r1, r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004006:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e049      	b.n	80040c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fc ff24 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fbbe 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e049      	b.n	8004174 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f841 	bl	800417c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f000 fb67 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0202 	mvn.w	r2, #2
 80041bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fae6 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fad8 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fae9 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b04      	cmp	r3, #4
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0204 	mvn.w	r2, #4
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fabc 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 faae 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fabf 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b08      	cmp	r3, #8
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b08      	cmp	r3, #8
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0208 	mvn.w	r2, #8
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa92 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa84 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fa95 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0210 	mvn.w	r2, #16
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2208      	movs	r2, #8
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa68 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa5a 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa6b 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0201 	mvn.w	r2, #1
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fa34 	bl	800477c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 ff24 	bl	8005188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434e:	d10e      	bne.n	800436e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	d107      	bne.n	800436e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 ff17 	bl	800519c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d10e      	bne.n	800439a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d107      	bne.n	800439a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fa19 	bl	80047cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d107      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f06f 0220 	mvn.w	r2, #32
 80043be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fed7 	bl	8005174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0fd      	b.n	80045e6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b14      	cmp	r3, #20
 80043f6:	f200 80f0 	bhi.w	80045da <HAL_TIM_PWM_ConfigChannel+0x20a>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004455 	.word	0x08004455
 8004404:	080045db 	.word	0x080045db
 8004408:	080045db 	.word	0x080045db
 800440c:	080045db 	.word	0x080045db
 8004410:	08004495 	.word	0x08004495
 8004414:	080045db 	.word	0x080045db
 8004418:	080045db 	.word	0x080045db
 800441c:	080045db 	.word	0x080045db
 8004420:	080044d7 	.word	0x080044d7
 8004424:	080045db 	.word	0x080045db
 8004428:	080045db 	.word	0x080045db
 800442c:	080045db 	.word	0x080045db
 8004430:	08004517 	.word	0x08004517
 8004434:	080045db 	.word	0x080045db
 8004438:	080045db 	.word	0x080045db
 800443c:	080045db 	.word	0x080045db
 8004440:	08004559 	.word	0x08004559
 8004444:	080045db 	.word	0x080045db
 8004448:	080045db 	.word	0x080045db
 800444c:	080045db 	.word	0x080045db
 8004450:	08004599 	.word	0x08004599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fa5e 	bl	800491c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	619a      	str	r2, [r3, #24]
      break;
 8004492:	e0a3      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fad8 	bl	8004a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6999      	ldr	r1, [r3, #24]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	619a      	str	r2, [r3, #24]
      break;
 80044d4:	e082      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb4b 	bl	8004b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0208 	orr.w	r2, r2, #8
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]
      break;
 8004514:	e062      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fbbd 	bl	8004c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69d9      	ldr	r1, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	61da      	str	r2, [r3, #28]
      break;
 8004556:	e041      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fc0c 	bl	8004d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0204 	bic.w	r2, r2, #4
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004596:	e021      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fc56 	bl	8004e50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	021a      	lsls	r2, r3, #8
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045d8:	e000      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80045da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop

080045f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e0b5      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x184>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800462a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004644:	d03e      	beq.n	80046c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	f200 8087 	bhi.w	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	f000 8085 	beq.w	8004760 <HAL_TIM_ConfigClockSource+0x170>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	d87f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b70      	cmp	r3, #112	; 0x70
 800465e:	d01a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xa6>
 8004660:	2b70      	cmp	r3, #112	; 0x70
 8004662:	d87b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b60      	cmp	r3, #96	; 0x60
 8004666:	d050      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x11a>
 8004668:	2b60      	cmp	r3, #96	; 0x60
 800466a:	d877      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d03c      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xfa>
 8004670:	2b50      	cmp	r3, #80	; 0x50
 8004672:	d873      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d058      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x13a>
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d86f      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d064      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d86b      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d060      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d867      	bhi.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05c      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d05a      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004694:	e062      	b.n	800475c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6899      	ldr	r1, [r3, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f000 fcb9 	bl	800501c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	609a      	str	r2, [r3, #8]
      break;
 80046c2:	e04e      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6899      	ldr	r1, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f000 fca2 	bl	800501c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e6:	609a      	str	r2, [r3, #8]
      break;
 80046e8:	e03b      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fc16 	bl	8004f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2150      	movs	r1, #80	; 0x50
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fc6f 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004708:	e02b      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fc35 	bl	8004f86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2160      	movs	r1, #96	; 0x60
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc5f 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004728:	e01b      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fbf6 	bl	8004f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fc4f 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004748:	e00b      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 fc46 	bl	8004fe6 <TIM_ITRx_SetConfig>
        break;
 800475a:	e002      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800475c:	bf00      	nop
 800475e:	e000      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004760:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a42      	ldr	r2, [pc, #264]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d00f      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3f      	ldr	r2, [pc, #252]	; (8004900 <TIM_Base_SetConfig+0x120>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3e      	ldr	r2, [pc, #248]	; (8004904 <TIM_Base_SetConfig+0x124>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3d      	ldr	r2, [pc, #244]	; (8004908 <TIM_Base_SetConfig+0x128>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3c      	ldr	r2, [pc, #240]	; (800490c <TIM_Base_SetConfig+0x12c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a31      	ldr	r2, [pc, #196]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d01b      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2e      	ldr	r2, [pc, #184]	; (8004900 <TIM_Base_SetConfig+0x120>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d017      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2d      	ldr	r2, [pc, #180]	; (8004904 <TIM_Base_SetConfig+0x124>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <TIM_Base_SetConfig+0x128>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00f      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <TIM_Base_SetConfig+0x130>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <TIM_Base_SetConfig+0x134>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <TIM_Base_SetConfig+0x138>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a25      	ldr	r2, [pc, #148]	; (800490c <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d108      	bne.n	800488c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <TIM_Base_SetConfig+0x100>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <TIM_Base_SetConfig+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0x100>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a13      	ldr	r2, [pc, #76]	; (8004910 <TIM_Base_SetConfig+0x130>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x100>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <TIM_Base_SetConfig+0x134>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x100>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a11      	ldr	r2, [pc, #68]	; (8004918 <TIM_Base_SetConfig+0x138>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x100>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40013400 	.word	0x40013400
 800490c:	40015000 	.word	0x40015000
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800

0800491c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0302 	bic.w	r3, r3, #2
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a30      	ldr	r2, [pc, #192]	; (8004a38 <TIM_OC1_SetConfig+0x11c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <TIM_OC1_SetConfig+0x88>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <TIM_OC1_SetConfig+0x120>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_OC1_SetConfig+0x88>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a2e      	ldr	r2, [pc, #184]	; (8004a40 <TIM_OC1_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_OC1_SetConfig+0x88>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <TIM_OC1_SetConfig+0x128>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC1_SetConfig+0x88>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <TIM_OC1_SetConfig+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC1_SetConfig+0x88>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <TIM_OC1_SetConfig+0x130>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10c      	bne.n	80049be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0308 	bic.w	r3, r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <TIM_OC1_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <TIM_OC1_SetConfig+0xd2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <TIM_OC1_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00f      	beq.n	80049ee <TIM_OC1_SetConfig+0xd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <TIM_OC1_SetConfig+0x124>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00b      	beq.n	80049ee <TIM_OC1_SetConfig+0xd2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <TIM_OC1_SetConfig+0x128>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <TIM_OC1_SetConfig+0xd2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <TIM_OC1_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_OC1_SetConfig+0xd2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <TIM_OC1_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d111      	bne.n	8004a12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	621a      	str	r2, [r3, #32]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40015000 	.word	0x40015000

08004a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f023 0210 	bic.w	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0320 	bic.w	r3, r3, #32
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <TIM_OC2_SetConfig+0x110>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_OC2_SetConfig+0x74>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a2b      	ldr	r2, [pc, #172]	; (8004b64 <TIM_OC2_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC2_SetConfig+0x74>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <TIM_OC2_SetConfig+0x118>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10d      	bne.n	8004ae0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <TIM_OC2_SetConfig+0x110>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <TIM_OC2_SetConfig+0xc0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <TIM_OC2_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00f      	beq.n	8004b10 <TIM_OC2_SetConfig+0xc0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <TIM_OC2_SetConfig+0x11c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_OC2_SetConfig+0xc0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <TIM_OC2_SetConfig+0x120>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_OC2_SetConfig+0xc0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <TIM_OC2_SetConfig+0x124>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_OC2_SetConfig+0xc0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <TIM_OC2_SetConfig+0x118>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d113      	bne.n	8004b38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40015000 	.word	0x40015000
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800

08004b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <TIM_OC3_SetConfig+0x10c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_OC3_SetConfig+0x72>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <TIM_OC3_SetConfig+0x110>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC3_SetConfig+0x72>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <TIM_OC3_SetConfig+0x114>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10d      	bne.n	8004c06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <TIM_OC3_SetConfig+0x10c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <TIM_OC3_SetConfig+0xbe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <TIM_OC3_SetConfig+0x110>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <TIM_OC3_SetConfig+0xbe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <TIM_OC3_SetConfig+0x118>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_OC3_SetConfig+0xbe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <TIM_OC3_SetConfig+0x11c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <TIM_OC3_SetConfig+0xbe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <TIM_OC3_SetConfig+0x120>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_OC3_SetConfig+0xbe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a16      	ldr	r2, [pc, #88]	; (8004c8c <TIM_OC3_SetConfig+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d113      	bne.n	8004c5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	621a      	str	r2, [r3, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40015000 	.word	0x40015000
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	031b      	lsls	r3, r3, #12
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <TIM_OC4_SetConfig+0xc8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <TIM_OC4_SetConfig+0x8c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <TIM_OC4_SetConfig+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_OC4_SetConfig+0x8c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <TIM_OC4_SetConfig+0xd0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_OC4_SetConfig+0x8c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <TIM_OC4_SetConfig+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_OC4_SetConfig+0x8c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC4_SetConfig+0xd8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_OC4_SetConfig+0x8c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC4_SetConfig+0xdc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d109      	bne.n	8004d3c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40014400 	.word	0x40014400
 8004d74:	40014800 	.word	0x40014800
 8004d78:	40015000 	.word	0x40015000

08004d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <TIM_OC5_SetConfig+0xbc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <TIM_OC5_SetConfig+0x82>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <TIM_OC5_SetConfig+0xc0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00f      	beq.n	8004dfe <TIM_OC5_SetConfig+0x82>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <TIM_OC5_SetConfig+0xc4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00b      	beq.n	8004dfe <TIM_OC5_SetConfig+0x82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <TIM_OC5_SetConfig+0xc8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d007      	beq.n	8004dfe <TIM_OC5_SetConfig+0x82>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <TIM_OC5_SetConfig+0xcc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_OC5_SetConfig+0x82>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <TIM_OC5_SetConfig+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d109      	bne.n	8004e12 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800
 8004e4c:	40015000 	.word	0x40015000

08004e50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	051b      	lsls	r3, r3, #20
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <TIM_OC6_SetConfig+0xc0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <TIM_OC6_SetConfig+0x84>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <TIM_OC6_SetConfig+0xc4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_OC6_SetConfig+0x84>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <TIM_OC6_SetConfig+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_OC6_SetConfig+0x84>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <TIM_OC6_SetConfig+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_OC6_SetConfig+0x84>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <TIM_OC6_SetConfig+0xd0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC6_SetConfig+0x84>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <TIM_OC6_SetConfig+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d109      	bne.n	8004ee8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	029b      	lsls	r3, r3, #10
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800
 8004f24:	40015000 	.word	0x40015000

08004f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 030a 	bic.w	r3, r3, #10
 8004f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0210 	bic.w	r2, r3, #16
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	031b      	lsls	r3, r3, #12
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	f043 0307 	orr.w	r3, r3, #7
 8005008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	431a      	orrs	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005070:	2302      	movs	r3, #2
 8005072:	e06d      	b.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d01d      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d018      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a11      	ldr	r2, [pc, #68]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10c      	bne.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40015000 	.word	0x40015000
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40014000 	.word	0x40014000

08005174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e040      	b.n	8005244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb fecc 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	; 0x24
 80051dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f82c 	bl	800524c <UART_SetConfig>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e022      	b.n	8005244 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9f6 	bl	80055f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa7d 	bl	800573c <UART_CheckIdleState>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4bab      	ldr	r3, [pc, #684]	; (8005524 <UART_SetConfig+0x2d8>)
 8005278:	4013      	ands	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	430b      	orrs	r3, r1
 8005282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a99      	ldr	r2, [pc, #612]	; (8005528 <UART_SetConfig+0x2dc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d120      	bne.n	800530a <UART_SetConfig+0xbe>
 80052c8:	4b98      	ldr	r3, [pc, #608]	; (800552c <UART_SetConfig+0x2e0>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d817      	bhi.n	8005304 <UART_SetConfig+0xb8>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <UART_SetConfig+0x90>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	080052ed 	.word	0x080052ed
 80052e0:	080052f9 	.word	0x080052f9
 80052e4:	080052ff 	.word	0x080052ff
 80052e8:	080052f3 	.word	0x080052f3
 80052ec:	2301      	movs	r3, #1
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e0b5      	b.n	800545e <UART_SetConfig+0x212>
 80052f2:	2302      	movs	r3, #2
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e0b2      	b.n	800545e <UART_SetConfig+0x212>
 80052f8:	2304      	movs	r3, #4
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e0af      	b.n	800545e <UART_SetConfig+0x212>
 80052fe:	2308      	movs	r3, #8
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e0ac      	b.n	800545e <UART_SetConfig+0x212>
 8005304:	2310      	movs	r3, #16
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e0a9      	b.n	800545e <UART_SetConfig+0x212>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a88      	ldr	r2, [pc, #544]	; (8005530 <UART_SetConfig+0x2e4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d124      	bne.n	800535e <UART_SetConfig+0x112>
 8005314:	4b85      	ldr	r3, [pc, #532]	; (800552c <UART_SetConfig+0x2e0>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800531c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005320:	d011      	beq.n	8005346 <UART_SetConfig+0xfa>
 8005322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005326:	d817      	bhi.n	8005358 <UART_SetConfig+0x10c>
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800532c:	d011      	beq.n	8005352 <UART_SetConfig+0x106>
 800532e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005332:	d811      	bhi.n	8005358 <UART_SetConfig+0x10c>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <UART_SetConfig+0xf4>
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d006      	beq.n	800534c <UART_SetConfig+0x100>
 800533e:	e00b      	b.n	8005358 <UART_SetConfig+0x10c>
 8005340:	2300      	movs	r3, #0
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e08b      	b.n	800545e <UART_SetConfig+0x212>
 8005346:	2302      	movs	r3, #2
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e088      	b.n	800545e <UART_SetConfig+0x212>
 800534c:	2304      	movs	r3, #4
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e085      	b.n	800545e <UART_SetConfig+0x212>
 8005352:	2308      	movs	r3, #8
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e082      	b.n	800545e <UART_SetConfig+0x212>
 8005358:	2310      	movs	r3, #16
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e07f      	b.n	800545e <UART_SetConfig+0x212>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a74      	ldr	r2, [pc, #464]	; (8005534 <UART_SetConfig+0x2e8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d124      	bne.n	80053b2 <UART_SetConfig+0x166>
 8005368:	4b70      	ldr	r3, [pc, #448]	; (800552c <UART_SetConfig+0x2e0>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005370:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005374:	d011      	beq.n	800539a <UART_SetConfig+0x14e>
 8005376:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800537a:	d817      	bhi.n	80053ac <UART_SetConfig+0x160>
 800537c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005380:	d011      	beq.n	80053a6 <UART_SetConfig+0x15a>
 8005382:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005386:	d811      	bhi.n	80053ac <UART_SetConfig+0x160>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <UART_SetConfig+0x148>
 800538c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005390:	d006      	beq.n	80053a0 <UART_SetConfig+0x154>
 8005392:	e00b      	b.n	80053ac <UART_SetConfig+0x160>
 8005394:	2300      	movs	r3, #0
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e061      	b.n	800545e <UART_SetConfig+0x212>
 800539a:	2302      	movs	r3, #2
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e05e      	b.n	800545e <UART_SetConfig+0x212>
 80053a0:	2304      	movs	r3, #4
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e05b      	b.n	800545e <UART_SetConfig+0x212>
 80053a6:	2308      	movs	r3, #8
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e058      	b.n	800545e <UART_SetConfig+0x212>
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e055      	b.n	800545e <UART_SetConfig+0x212>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a60      	ldr	r2, [pc, #384]	; (8005538 <UART_SetConfig+0x2ec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d124      	bne.n	8005406 <UART_SetConfig+0x1ba>
 80053bc:	4b5b      	ldr	r3, [pc, #364]	; (800552c <UART_SetConfig+0x2e0>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053c8:	d011      	beq.n	80053ee <UART_SetConfig+0x1a2>
 80053ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053ce:	d817      	bhi.n	8005400 <UART_SetConfig+0x1b4>
 80053d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d4:	d011      	beq.n	80053fa <UART_SetConfig+0x1ae>
 80053d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053da:	d811      	bhi.n	8005400 <UART_SetConfig+0x1b4>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <UART_SetConfig+0x19c>
 80053e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e4:	d006      	beq.n	80053f4 <UART_SetConfig+0x1a8>
 80053e6:	e00b      	b.n	8005400 <UART_SetConfig+0x1b4>
 80053e8:	2300      	movs	r3, #0
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e037      	b.n	800545e <UART_SetConfig+0x212>
 80053ee:	2302      	movs	r3, #2
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e034      	b.n	800545e <UART_SetConfig+0x212>
 80053f4:	2304      	movs	r3, #4
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e031      	b.n	800545e <UART_SetConfig+0x212>
 80053fa:	2308      	movs	r3, #8
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e02e      	b.n	800545e <UART_SetConfig+0x212>
 8005400:	2310      	movs	r3, #16
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e02b      	b.n	800545e <UART_SetConfig+0x212>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a4c      	ldr	r2, [pc, #304]	; (800553c <UART_SetConfig+0x2f0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d124      	bne.n	800545a <UART_SetConfig+0x20e>
 8005410:	4b46      	ldr	r3, [pc, #280]	; (800552c <UART_SetConfig+0x2e0>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800541c:	d011      	beq.n	8005442 <UART_SetConfig+0x1f6>
 800541e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005422:	d817      	bhi.n	8005454 <UART_SetConfig+0x208>
 8005424:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005428:	d011      	beq.n	800544e <UART_SetConfig+0x202>
 800542a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800542e:	d811      	bhi.n	8005454 <UART_SetConfig+0x208>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <UART_SetConfig+0x1f0>
 8005434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005438:	d006      	beq.n	8005448 <UART_SetConfig+0x1fc>
 800543a:	e00b      	b.n	8005454 <UART_SetConfig+0x208>
 800543c:	2300      	movs	r3, #0
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e00d      	b.n	800545e <UART_SetConfig+0x212>
 8005442:	2302      	movs	r3, #2
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e00a      	b.n	800545e <UART_SetConfig+0x212>
 8005448:	2304      	movs	r3, #4
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e007      	b.n	800545e <UART_SetConfig+0x212>
 800544e:	2308      	movs	r3, #8
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e004      	b.n	800545e <UART_SetConfig+0x212>
 8005454:	2310      	movs	r3, #16
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e001      	b.n	800545e <UART_SetConfig+0x212>
 800545a:	2310      	movs	r3, #16
 800545c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005466:	d16d      	bne.n	8005544 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8005468:	7ffb      	ldrb	r3, [r7, #31]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d827      	bhi.n	80054be <UART_SetConfig+0x272>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <UART_SetConfig+0x228>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005499 	.word	0x08005499
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a9 	.word	0x080054a9
 8005480:	080054bf 	.word	0x080054bf
 8005484:	080054af 	.word	0x080054af
 8005488:	080054bf 	.word	0x080054bf
 800548c:	080054bf 	.word	0x080054bf
 8005490:	080054bf 	.word	0x080054bf
 8005494:	080054b7 	.word	0x080054b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005498:	f7fe f9d0 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 800549c:	61b8      	str	r0, [r7, #24]
        break;
 800549e:	e013      	b.n	80054c8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a0:	f7fe f9ee 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80054a4:	61b8      	str	r0, [r7, #24]
        break;
 80054a6:	e00f      	b.n	80054c8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <UART_SetConfig+0x2f4>)
 80054aa:	61bb      	str	r3, [r7, #24]
        break;
 80054ac:	e00c      	b.n	80054c8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ae:	f7fe f94d 	bl	800374c <HAL_RCC_GetSysClockFreq>
 80054b2:	61b8      	str	r0, [r7, #24]
        break;
 80054b4:	e008      	b.n	80054c8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ba:	61bb      	str	r3, [r7, #24]
        break;
 80054bc:	e004      	b.n	80054c8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	77bb      	strb	r3, [r7, #30]
        break;
 80054c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8086 	beq.w	80055dc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	005a      	lsls	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	441a      	add	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d916      	bls.n	800551c <UART_SetConfig+0x2d0>
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d212      	bcs.n	800551c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f023 030f 	bic.w	r3, r3, #15
 80054fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	b29a      	uxth	r2, r3
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	4313      	orrs	r3, r2
 8005510:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	89fa      	ldrh	r2, [r7, #14]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e05f      	b.n	80055dc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	77bb      	strb	r3, [r7, #30]
 8005520:	e05c      	b.n	80055dc <UART_SetConfig+0x390>
 8005522:	bf00      	nop
 8005524:	efff69f3 	.word	0xefff69f3
 8005528:	40013800 	.word	0x40013800
 800552c:	40021000 	.word	0x40021000
 8005530:	40004400 	.word	0x40004400
 8005534:	40004800 	.word	0x40004800
 8005538:	40004c00 	.word	0x40004c00
 800553c:	40005000 	.word	0x40005000
 8005540:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005544:	7ffb      	ldrb	r3, [r7, #31]
 8005546:	2b08      	cmp	r3, #8
 8005548:	d827      	bhi.n	800559a <UART_SetConfig+0x34e>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <UART_SetConfig+0x304>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	0800559b 	.word	0x0800559b
 8005560:	0800558b 	.word	0x0800558b
 8005564:	0800559b 	.word	0x0800559b
 8005568:	0800559b 	.word	0x0800559b
 800556c:	0800559b 	.word	0x0800559b
 8005570:	08005593 	.word	0x08005593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005574:	f7fe f962 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 8005578:	61b8      	str	r0, [r7, #24]
        break;
 800557a:	e013      	b.n	80055a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800557c:	f7fe f980 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 8005580:	61b8      	str	r0, [r7, #24]
        break;
 8005582:	e00f      	b.n	80055a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005584:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <UART_SetConfig+0x3a8>)
 8005586:	61bb      	str	r3, [r7, #24]
        break;
 8005588:	e00c      	b.n	80055a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558a:	f7fe f8df 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800558e:	61b8      	str	r0, [r7, #24]
        break;
 8005590:	e008      	b.n	80055a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005596:	61bb      	str	r3, [r7, #24]
        break;
 8005598:	e004      	b.n	80055a4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	77bb      	strb	r3, [r7, #30]
        break;
 80055a2:	bf00      	nop
    }

    if (pclk != 0U)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	085a      	lsrs	r2, r3, #1
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	441a      	add	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	b29b      	uxth	r3, r3
 80055be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b0f      	cmp	r3, #15
 80055c4:	d908      	bls.n	80055d8 <UART_SetConfig+0x38c>
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d204      	bcs.n	80055d8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e001      	b.n	80055dc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	007a1200 	.word	0x007a1200

080055f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01a      	beq.n	800570e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056f6:	d10a      	bne.n	800570e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800574c:	f7fb fd4e 	bl	80011ec <HAL_GetTick>
 8005750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b08      	cmp	r3, #8
 800575e:	d10e      	bne.n	800577e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f82d 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e023      	b.n	80057c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b04      	cmp	r3, #4
 800578a:	d10e      	bne.n	80057aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800578c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f817 	bl	80057ce <UART_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00d      	b.n	80057c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057de:	e05e      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d05a      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e8:	f7fb fd00 	bl	80011ec <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d302      	bcc.n	80057fe <UART_WaitOnFlagUntilTimeout+0x30>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11b      	bne.n	8005836 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800580c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e043      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d02c      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005852:	d124      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800585c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800586c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e00f      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4013      	ands	r3, r2
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	bf0c      	ite	eq
 80058ae:	2301      	moveq	r3, #1
 80058b0:	2300      	movne	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d091      	beq.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80058cc:	4904      	ldr	r1, [pc, #16]	; (80058e0 <MX_FATFS_Init+0x18>)
 80058ce:	4805      	ldr	r0, [pc, #20]	; (80058e4 <MX_FATFS_Init+0x1c>)
 80058d0:	f000 f8b0 	bl	8005a34 <FATFS_LinkDriver>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <MX_FATFS_Init+0x20>)
 80058da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000414 	.word	0x20000414
 80058e4:	2000000c 	.word	0x2000000c
 80058e8:	20000418 	.word	0x20000418

080058ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <USER_initialize+0x24>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	701a      	strb	r2, [r3, #0]
    return Stat;
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <USER_initialize+0x24>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000009 	.word	0x20000009

08005914 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <USER_status+0x24>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <USER_status+0x24>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000009 	.word	0x20000009

0800593c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800594c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800596a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	603a      	str	r2, [r7, #0]
 8005982:	71fb      	strb	r3, [r7, #7]
 8005984:	460b      	mov	r3, r1
 8005986:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
    return res;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	4613      	mov	r3, r2
 80059a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80059b2:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059b4:	7a5b      	ldrb	r3, [r3, #9]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d831      	bhi.n	8005a20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80059bc:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059be:	7a5b      	ldrb	r3, [r3, #9]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059c6:	2100      	movs	r1, #0
 80059c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80059ca:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059cc:	7a5b      	ldrb	r3, [r3, #9]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059dc:	7a5b      	ldrb	r3, [r3, #9]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059e4:	4413      	add	r3, r2
 80059e6:	79fa      	ldrb	r2, [r7, #7]
 80059e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059ec:	7a5b      	ldrb	r3, [r3, #9]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	b2d1      	uxtb	r1, r2
 80059f4:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <FATFS_LinkDriverEx+0x94>)
 80059f6:	7251      	strb	r1, [r2, #9]
 80059f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	3330      	adds	r3, #48	; 0x30
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	3301      	adds	r3, #1
 8005a08:	223a      	movs	r2, #58	; 0x3a
 8005a0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3302      	adds	r3, #2
 8005a10:	222f      	movs	r2, #47	; 0x2f
 8005a12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3303      	adds	r3, #3
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000040 	.word	0x20000040

08005a34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff ffaa 	bl	800599c <FATFS_LinkDriverEx>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4d0d      	ldr	r5, [pc, #52]	; (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	; (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4d0b      	ldr	r5, [pc, #44]	; (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	; (8005a98 <__libc_init_array+0x44>)
 8005a68:	f000 f820 	bl	8005aac <_init>
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2600      	movs	r6, #0
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7c:	4798      	blx	r3
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a86:	4798      	blx	r3
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	08005afc 	.word	0x08005afc
 8005a90:	08005afc 	.word	0x08005afc
 8005a94:	08005afc 	.word	0x08005afc
 8005a98:	08005b00 	.word	0x08005b00

08005a9c <memset>:
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <_init>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_fini>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr
