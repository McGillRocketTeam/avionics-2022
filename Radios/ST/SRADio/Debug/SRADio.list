
SRADio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005284  08005284  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005284  08005284  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005284  08005284  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800528c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001b0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001077c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d30  00000000  00000000  0003081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  00032550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac0  00000000  00000000  000330b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dad  00000000  00000000  00033b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d837  00000000  00000000  00054925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5fa7  00000000  00000000  0006215c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128103  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003344  00000000  00000000  00128158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050c8 	.word	0x080050c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080050c8 	.word	0x080050c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b097      	sub	sp, #92	; 0x5c
 8000294:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f001 fa1b 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f843 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f90d 	bl	80004bc <MX_GPIO_Init>
  MX_SPI3_Init();
 80002a2:	f000 f89d 	bl	80003e0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80002a6:	f000 f8d9 	bl	800045c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  set_hspi(hspi3);
 80002aa:	4c19      	ldr	r4, [pc, #100]	; (8000310 <main+0x80>)
 80002ac:	4668      	mov	r0, sp
 80002ae:	f104 0310 	add.w	r3, r4, #16
 80002b2:	2254      	movs	r2, #84	; 0x54
 80002b4:	4619      	mov	r1, r3
 80002b6:	f004 fad1 	bl	800485c <memcpy>
 80002ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002be:	f000 fc1b 	bl	8000af8 <set_hspi>
  set_NSS_pin(NSS_1_GPIO_Port, NSS_1_Pin);
 80002c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f000 fbbd 	bl	8000a48 <set_NSS_pin>
  set_BUSY_pin(BUSY_1_GPIO_Port, BUSY_1_Pin);
 80002ce:	2110      	movs	r1, #16
 80002d0:	4810      	ldr	r0, [pc, #64]	; (8000314 <main+0x84>)
 80002d2:	f000 fbcf 	bl	8000a74 <set_BUSY_pin>
  set_NRESET_pin(NRESET_1_GPIO_Port, NRESET_1_Pin);
 80002d6:	2104      	movs	r1, #4
 80002d8:	480f      	ldr	r0, [pc, #60]	; (8000318 <main+0x88>)
 80002da:	f000 fbe1 	bl	8000aa0 <set_NRESET_pin>
  set_DIO1_pin(DIO1_1_GPIO_Port, DIO1_1_Pin);
 80002de:	2120      	movs	r1, #32
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <main+0x84>)
 80002e2:	f000 fbf3 	bl	8000acc <set_DIO1_pin>
  Tx_setup();
 80002e6:	f000 fc1f 	bl	8000b28 <Tx_setup>
  sprintf((char *)tx_buffer, "0123456789");
 80002ea:	490c      	ldr	r1, [pc, #48]	; (800031c <main+0x8c>)
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <main+0x90>)
 80002ee:	f004 fb85 	bl	80049fc <siprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	TxProtocol(tx_buffer, strlen((char const *)tx_buffer));
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <main+0x90>)
 80002f4:	f7ff ff74 	bl	80001e0 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4619      	mov	r1, r3
 80002fe:	4808      	ldr	r0, [pc, #32]	; (8000320 <main+0x90>)
 8000300:	f000 fcc8 	bl	8000c94 <TxProtocol>
	HAL_Delay(1000);
 8000304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000308:	f001 fa48 	bl	800179c <HAL_Delay>
	TxProtocol(tx_buffer, strlen((char const *)tx_buffer));
 800030c:	e7f1      	b.n	80002f2 <main+0x62>
 800030e:	bf00      	nop
 8000310:	20000124 	.word	0x20000124
 8000314:	48000400 	.word	0x48000400
 8000318:	48000c00 	.word	0x48000c00
 800031c:	080050e0 	.word	0x080050e0
 8000320:	2000008c 	.word	0x2000008c

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b0a6      	sub	sp, #152	; 0x98
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f004 faa0 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2258      	movs	r2, #88	; 0x58
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f004 fa92 	bl	8004878 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	2302      	movs	r3, #2
 8000356:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	2310      	movs	r3, #16
 800035e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800036c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000382:	4618      	mov	r0, r3
 8000384:	f001 fcce 	bl	8001d24 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800038e:	f000 f973 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2302      	movs	r3, #2
 8000398:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003aa:	2101      	movs	r1, #1
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 fbcf 	bl	8002b50 <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003b8:	f000 f95e 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003bc:	2301      	movs	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fdf8 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003d2:	f000 f951 	bl	8000678 <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3798      	adds	r7, #152	; 0x98
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_SPI3_Init+0x74>)
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <MX_SPI3_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_SPI3_Init+0x74>)
 80003ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_SPI3_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_SPI3_Init+0x74>)
 80003fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_SPI3_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_SPI3_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_SPI3_Init+0x74>)
 800040e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000412:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_SPI3_Init+0x74>)
 8000416:	2218      	movs	r2, #24
 8000418:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_SPI3_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_SPI3_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_SPI3_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_SPI3_Init+0x74>)
 800042e:	2207      	movs	r2, #7
 8000430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_SPI3_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_SPI3_Init+0x74>)
 800043a:	2208      	movs	r2, #8
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_SPI3_Init+0x74>)
 8000440:	f002 ffda 	bl	80033f8 <HAL_SPI_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 f915 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000124 	.word	0x20000124
 8000458:	40003c00 	.word	0x40003c00

0800045c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000462:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <MX_USART1_UART_Init+0x5c>)
 8000464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000468:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800046c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_USART1_UART_Init+0x58>)
 80004a0:	f003 fd3a 	bl	8003f18 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004aa:	f000 f8e5 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000188 	.word	0x20000188
 80004b8:	40013800 	.word	0x40013800

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08a      	sub	sp, #40	; 0x28
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a34      	ldr	r2, [pc, #208]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b2f      	ldr	r3, [pc, #188]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xec>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_GPIO_Init+0xec>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_GPIO_Init+0xec>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_1_GPIO_Port, NSS_1_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f001 fbda 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRESET_1_GPIO_Port, NRESET_1_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2104      	movs	r1, #4
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <MX_GPIO_Init+0xf0>)
 8000546:	f001 fbd5 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_1_Pin */
  GPIO_InitStruct.Pin = NSS_1_Pin;
 800054a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_1_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4619      	mov	r1, r3
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f001 fa23 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRESET_1_Pin */
  GPIO_InitStruct.Pin = NRESET_1_Pin;
 800056a:	2304      	movs	r3, #4
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRESET_1_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <MX_GPIO_Init+0xf0>)
 8000582:	f001 fa15 	bl	80019b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_1_Pin DIO1_1_Pin */
  GPIO_InitStruct.Pin = BUSY_1_Pin|DIO1_1_Pin;
 8000586:	2330      	movs	r3, #48	; 0x30
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xf4>)
 800059a:	f001 fa09 	bl	80019b0 <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	48000400 	.word	0x48000400

080005b4 <transmitBuffer>:

/* USER CODE BEGIN 4 */
void transmitBuffer(char buffer[]){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint8_t length = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
	while(buffer[length] != 0){
 80005c0:	e002      	b.n	80005c8 <transmitBuffer+0x14>
		length++;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	3301      	adds	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
	while(buffer[length] != 0){
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f6      	bne.n	80005c2 <transmitBuffer+0xe>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, 100);
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <transmitBuffer+0x38>)
 80005de:	f003 fce9 	bl	8003fb4 <HAL_UART_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000188 	.word	0x20000188

080005f0 <transmitStatus>:

void transmitStatus(HAL_StatusTypeDef status){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if(status == HAL_OK){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d106      	bne.n	800060e <transmitStatus+0x1e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: HAL_OK\n", 15, 100);
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	220f      	movs	r2, #15
 8000604:	4916      	ldr	r1, [pc, #88]	; (8000660 <transmitStatus+0x70>)
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <transmitStatus+0x74>)
 8000608:	f003 fcd4 	bl	8003fb4 <HAL_UART_Transmit>
	} else if(status == HAL_TIMEOUT){
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: HAL_TIMEOUT\n", 20, 100);
	} else {
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: Unknown status Received\n", 32, 100);
	}
}
 800060c:	e023      	b.n	8000656 <transmitStatus+0x66>
	} else if(status == HAL_ERROR){
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d106      	bne.n	8000622 <transmitStatus+0x32>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: HAL_ERROR\n", 18, 100);
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	2212      	movs	r2, #18
 8000618:	4913      	ldr	r1, [pc, #76]	; (8000668 <transmitStatus+0x78>)
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <transmitStatus+0x74>)
 800061c:	f003 fcca 	bl	8003fb4 <HAL_UART_Transmit>
}
 8000620:	e019      	b.n	8000656 <transmitStatus+0x66>
	} else if(status == HAL_BUSY){
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d106      	bne.n	8000636 <transmitStatus+0x46>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: HAL_BUSY\n", 17, 100);
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	2211      	movs	r2, #17
 800062c:	490f      	ldr	r1, [pc, #60]	; (800066c <transmitStatus+0x7c>)
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <transmitStatus+0x74>)
 8000630:	f003 fcc0 	bl	8003fb4 <HAL_UART_Transmit>
}
 8000634:	e00f      	b.n	8000656 <transmitStatus+0x66>
	} else if(status == HAL_TIMEOUT){
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d106      	bne.n	800064a <transmitStatus+0x5a>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: HAL_TIMEOUT\n", 20, 100);
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	2214      	movs	r2, #20
 8000640:	490b      	ldr	r1, [pc, #44]	; (8000670 <transmitStatus+0x80>)
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <transmitStatus+0x74>)
 8000644:	f003 fcb6 	bl	8003fb4 <HAL_UART_Transmit>
}
 8000648:	e005      	b.n	8000656 <transmitStatus+0x66>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Status: Unknown status Received\n", 32, 100);
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	2220      	movs	r2, #32
 800064e:	4909      	ldr	r1, [pc, #36]	; (8000674 <transmitStatus+0x84>)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <transmitStatus+0x74>)
 8000652:	f003 fcaf 	bl	8003fb4 <HAL_UART_Transmit>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	080050ec 	.word	0x080050ec
 8000664:	20000188 	.word	0x20000188
 8000668:	080050fc 	.word	0x080050fc
 800066c:	08005110 	.word	0x08005110
 8000670:	08005124 	.word	0x08005124
 8000674:	0800513c 	.word	0x0800513c

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a17      	ldr	r2, [pc, #92]	; (8000748 <HAL_SPI_MspInit+0x7c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d128      	bne.n	8000740 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_SPI_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <HAL_SPI_MspInit+0x80>)
 80006f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_SPI_MspInit+0x80>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_SPI_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <HAL_SPI_MspInit+0x80>)
 800070c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_SPI_MspInit+0x80>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800071e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000730:	2306      	movs	r3, #6
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <HAL_SPI_MspInit+0x84>)
 800073c:	f001 f938 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40003c00 	.word	0x40003c00
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_UART_MspInit+0x7c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d127      	bne.n	80007c6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <HAL_UART_MspInit+0x80>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0x80>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_UART_MspInit+0x80>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a6:	23c0      	movs	r3, #192	; 0xc0
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007b6:	2307      	movs	r3, #7
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <HAL_UART_MspInit+0x84>)
 80007c2:	f001 f8f5 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000400 	.word	0x48000400

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 ff98 	bl	800175c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8000840:	bf00      	nop
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <sx126x_hal_write+0x64>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <sx126x_hal_write+0x68>)
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fa39 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d0f4      	beq.n	8000842 <sx126x_hal_write+0x12>
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <sx126x_hal_write+0x6c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <sx126x_hal_write+0x70>)
 800085e:	8811      	ldrh	r1, [r2, #0]
 8000860:	2200      	movs	r2, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa46 	bl	8001cf4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f002 fe6d 	bl	800354e <HAL_SPI_Transmit>
 8000874:	4603      	mov	r3, r0
 8000876:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <sx126x_hal_write+0x6c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <sx126x_hal_write+0x70>)
 800087e:	8811      	ldrh	r1, [r2, #0]
 8000880:	2201      	movs	r2, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fa36 	bl	8001cf4 <HAL_GPIO_WritePin>
	return status;
 8000888:	7dfb      	ldrb	r3, [r7, #23]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000a8 	.word	0x200000a8
 8000898:	200000a4 	.word	0x200000a4
 800089c:	20000098 	.word	0x20000098
 80008a0:	20000096 	.word	0x20000096

080008a4 <sx126x_hal_read>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_lenght,
                                     uint8_t* data, const uint16_t data_length ){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 80008b4:	bf00      	nop
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <sx126x_hal_read+0x7c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <sx126x_hal_read+0x80>)
 80008bc:	8812      	ldrh	r2, [r2, #0]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 f9ff 	bl	8001cc4 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d0f4      	beq.n	80008b6 <sx126x_hal_read+0x12>
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <sx126x_hal_read+0x84>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a16      	ldr	r2, [pc, #88]	; (800092c <sx126x_hal_read+0x88>)
 80008d2:	8811      	ldrh	r1, [r2, #0]
 80008d4:	2200      	movs	r2, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fa0c 	bl	8001cf4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, command, 1, 100);
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f002 fe33 	bl	800354e <HAL_SPI_Transmit>
 80008e8:	4603      	mov	r3, r0
 80008ea:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_TransmitReceive(hspi, command+sizeof(uint8_t), data, command_lenght-1, 100);
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c59      	adds	r1, r3, #1
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	2264      	movs	r2, #100	; 0x64
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f002 ff94 	bl	800382a <HAL_SPI_TransmitReceive>
 8000902:	4603      	mov	r3, r0
 8000904:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <sx126x_hal_read+0x84>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <sx126x_hal_read+0x88>)
 800090c:	8811      	ldrh	r1, [r2, #0]
 800090e:	2201      	movs	r2, #1
 8000910:	4618      	mov	r0, r3
 8000912:	f001 f9ef 	bl	8001cf4 <HAL_GPIO_WritePin>
	return status;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000a8 	.word	0x200000a8
 8000924:	200000a4 	.word	0x200000a4
 8000928:	20000098 	.word	0x20000098
 800092c:	20000096 	.word	0x20000096

08000930 <writeCommand>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
	return status;
}

HAL_StatusTypeDef writeCommand(uint8_t opcode, uint8_t params[], uint16_t numOfParams){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 8000940:	bf00      	nop
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <writeCommand+0x74>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <writeCommand+0x78>)
 8000948:	8812      	ldrh	r2, [r2, #0]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f9b9 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d0f4      	beq.n	8000942 <writeCommand+0x12>
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <writeCommand+0x7c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <writeCommand+0x80>)
 800095e:	8811      	ldrh	r1, [r2, #0]
 8000960:	2200      	movs	r2, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f9c6 	bl	8001cf4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi, &opcode, 1, 100);
 8000968:	1df9      	adds	r1, r7, #7
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	2201      	movs	r2, #1
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <writeCommand+0x84>)
 8000970:	f002 fded 	bl	800354e <HAL_SPI_Transmit>
 8000974:	4603      	mov	r3, r0
 8000976:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(&hspi, (uint8_t*)params, numOfParams, 100);
 8000978:	88ba      	ldrh	r2, [r7, #4]
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	6839      	ldr	r1, [r7, #0]
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <writeCommand+0x84>)
 8000980:	f002 fde5 	bl	800354e <HAL_SPI_Transmit>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <writeCommand+0x7c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <writeCommand+0x80>)
 800098e:	8811      	ldrh	r1, [r2, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f9ae 	bl	8001cf4 <HAL_GPIO_WritePin>
	return status;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a8 	.word	0x200000a8
 80009a8:	200000a4 	.word	0x200000a4
 80009ac:	20000098 	.word	0x20000098
 80009b0:	20000096 	.word	0x20000096
 80009b4:	200000b4 	.word	0x200000b4

080009b8 <readCommand>:

HAL_StatusTypeDef readCommand(uint8_t opcode, uint8_t params[], uint8_t response[], uint16_t numOfParams){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	461a      	mov	r2, r3
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	4613      	mov	r3, r2
 80009ca:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status;
	while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 80009cc:	bf00      	nop
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <readCommand+0x7c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <readCommand+0x80>)
 80009d4:	8812      	ldrh	r2, [r2, #0]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 f973 	bl	8001cc4 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d0f4      	beq.n	80009ce <readCommand+0x16>
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <readCommand+0x84>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <readCommand+0x88>)
 80009ea:	8811      	ldrh	r1, [r2, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f980 	bl	8001cf4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi, &opcode, 1, 100);
 80009f4:	f107 010f 	add.w	r1, r7, #15
 80009f8:	2364      	movs	r3, #100	; 0x64
 80009fa:	2201      	movs	r2, #1
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <readCommand+0x8c>)
 80009fe:	f002 fda6 	bl	800354e <HAL_SPI_Transmit>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
 8000a06:	89bb      	ldrh	r3, [r7, #12]
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	9200      	str	r2, [sp, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <readCommand+0x8c>)
 8000a12:	f002 ff0a 	bl	800382a <HAL_SPI_TransmitReceive>
 8000a16:	4603      	mov	r3, r0
 8000a18:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <readCommand+0x84>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <readCommand+0x88>)
 8000a20:	8811      	ldrh	r1, [r2, #0]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f965 	bl	8001cf4 <HAL_GPIO_WritePin>
	return status;
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000a8 	.word	0x200000a8
 8000a38:	200000a4 	.word	0x200000a4
 8000a3c:	20000098 	.word	0x20000098
 8000a40:	20000096 	.word	0x20000096
 8000a44:	200000b4 	.word	0x200000b4

08000a48 <set_NSS_pin>:

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
	NSS = _NSS;
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <set_NSS_pin+0x24>)
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	8013      	strh	r3, [r2, #0]
	NSS_GPIO = _NSS_GPIO;
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <set_NSS_pin+0x28>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20000096 	.word	0x20000096
 8000a70:	20000098 	.word	0x20000098

08000a74 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
	BUSY = _BUSY;
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <set_BUSY_pin+0x24>)
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	8013      	strh	r3, [r2, #0]
	BUSY_GPIO = _BUSY_GPIO;
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <set_BUSY_pin+0x28>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	200000a4 	.word	0x200000a4
 8000a9c:	200000a8 	.word	0x200000a8

08000aa0 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
	NRESET = _NRESET;
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <set_NRESET_pin+0x24>)
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	8013      	strh	r3, [r2, #0]
	NRESET_GPIO = _NRESET_GPIO;
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <set_NRESET_pin+0x28>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	2000009c 	.word	0x2000009c
 8000ac8:	200000a0 	.word	0x200000a0

08000acc <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
	DIO1 = _DIO1;
 8000ad8:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <set_DIO1_pin+0x24>)
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	8013      	strh	r3, [r2, #0]
	DIO1_GPIO = _DIO1_GPIO;
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <set_DIO1_pin+0x28>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	200000ac 	.word	0x200000ac
 8000af4:	200000b0 	.word	0x200000b0

08000af8 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
	DIO3 = _DIO3;
	DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 8000af8:	b084      	sub	sp, #16
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	f107 0c08 	add.w	ip, r7, #8
 8000b02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hspi = _hspi;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <set_hspi+0x2c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2264      	movs	r2, #100	; 0x64
 8000b10:	4619      	mov	r1, r3
 8000b12:	f003 fea3 	bl	800485c <memcpy>
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b1e:	b004      	add	sp, #16
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000b4 	.word	0x200000b4

08000b28 <Tx_setup>:

void Tx_setup(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 8000b2e:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <Tx_setup+0x154>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a53      	ldr	r2, [pc, #332]	; (8000c80 <Tx_setup+0x158>)
 8000b34:	8811      	ldrh	r1, [r2, #0]
 8000b36:	2201      	movs	r2, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f8db 	bl	8001cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET); //Make sure chip select is off
 8000b3e:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <Tx_setup+0x15c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <Tx_setup+0x160>)
 8000b44:	8811      	ldrh	r1, [r2, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f8d3 	bl	8001cf4 <HAL_GPIO_WritePin>

	//set to standby
	sx126x_set_standby(&hspi, 0);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	484e      	ldr	r0, [pc, #312]	; (8000c8c <Tx_setup+0x164>)
 8000b52:	f000 f9c7 	bl	8000ee4 <sx126x_set_standby>

	//set packet type to LORA
	sx126x_set_pkt_type(&hspi, 1);
 8000b56:	2101      	movs	r1, #1
 8000b58:	484c      	ldr	r0, [pc, #304]	; (8000c8c <Tx_setup+0x164>)
 8000b5a:	f000 fbc5 	bl	80012e8 <sx126x_set_pkt_type>

	//set frequency
	sx126x_set_rf_freq(&hspi, 448000000);
 8000b5e:	494c      	ldr	r1, [pc, #304]	; (8000c90 <Tx_setup+0x168>)
 8000b60:	484a      	ldr	r0, [pc, #296]	; (8000c8c <Tx_setup+0x164>)
 8000b62:	f000 fb87 	bl	8001274 <sx126x_set_rf_freq>

	//set pa config
	struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 8000b66:	2004      	movs	r0, #4
 8000b68:	f003 fe68 	bl	800483c <malloc>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	617b      	str	r3, [r7, #20]
	params->pa_duty_cycle=2;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2202      	movs	r2, #2
 8000b74:	701a      	strb	r2, [r3, #0]
	params->hp_max=3;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2203      	movs	r2, #3
 8000b7a:	705a      	strb	r2, [r3, #1]
	params->device_sel=0;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	709a      	strb	r2, [r3, #2]
	params->pa_lut=1;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2201      	movs	r2, #1
 8000b86:	70da      	strb	r2, [r3, #3]
	sx126x_set_pa_cfg(&hspi, params);
 8000b88:	6979      	ldr	r1, [r7, #20]
 8000b8a:	4840      	ldr	r0, [pc, #256]	; (8000c8c <Tx_setup+0x164>)
 8000b8c:	f000 fa32 	bl	8000ff4 <sx126x_set_pa_cfg>
	free(params);
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f003 fe5b 	bl	800484c <free>

	//set tx params
	int8_t power = 14;
 8000b96:	230e      	movs	r3, #14
 8000b98:	74fb      	strb	r3, [r7, #19]
	sx126x_set_tx_params(&hspi, power, SX126X_RAMP_200_US);
 8000b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	483a      	ldr	r0, [pc, #232]	; (8000c8c <Tx_setup+0x164>)
 8000ba4:	f000 fbde 	bl	8001364 <sx126x_set_tx_params>

	//set buffer base address
	sx126x_set_buffer_base_address(&hspi, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <Tx_setup+0x164>)
 8000bae:	f000 fc97 	bl	80014e0 <sx126x_set_buffer_base_address>

	//set modulation parameters
	struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 8000bb2:	2004      	movs	r0, #4
 8000bb4:	f003 fe42 	bl	800483c <malloc>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60fb      	str	r3, [r7, #12]
	mod_params->sf=9;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	701a      	strb	r2, [r3, #0]
	mod_params->bw=3;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	705a      	strb	r2, [r3, #1]
	mod_params->cr=1;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	709a      	strb	r2, [r3, #2]
	mod_params->ldro=0;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	70da      	strb	r2, [r3, #3]
	sx126x_set_lora_mod_params(&hspi, mod_params);
 8000bd4:	68f9      	ldr	r1, [r7, #12]
 8000bd6:	482d      	ldr	r0, [pc, #180]	; (8000c8c <Tx_setup+0x164>)
 8000bd8:	f000 fbe8 	bl	80013ac <sx126x_set_lora_mod_params>
	free(mod_params);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f003 fe35 	bl	800484c <free>

	//set dio and irq parameters
	sx126x_set_dio_irq_params(&hspi,1023,0b1000000001,0,0);
 8000be2:	2300      	movs	r3, #0
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	f240 2201 	movw	r2, #513	; 0x201
 8000bec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bf0:	4826      	ldr	r0, [pc, #152]	; (8000c8c <Tx_setup+0x164>)
 8000bf2:	f000 fa92 	bl	800111a <sx126x_set_dio_irq_params>

	//sx126x_set_standby(&hspi1, 0);

	//sx126x_set_pkt_type(&hspi1, 1);

	sx126x_set_rx_tx_fallback_mode(&hspi, 0x20);
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	4824      	ldr	r0, [pc, #144]	; (8000c8c <Tx_setup+0x164>)
 8000bfa:	f000 fa20 	bl	800103e <sx126x_set_rx_tx_fallback_mode>

	sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <Tx_setup+0x164>)
 8000c02:	f000 faf5 	bl	80011f0 <sx126x_set_dio2_as_rf_sw_ctrl>

	sx126x_set_dio3_as_tcxo_ctrl(&hspi, 0x06, 100);
 8000c06:	2264      	movs	r2, #100	; 0x64
 8000c08:	2106      	movs	r1, #6
 8000c0a:	4820      	ldr	r0, [pc, #128]	; (8000c8c <Tx_setup+0x164>)
 8000c0c:	f000 fb0a 	bl	8001224 <sx126x_set_dio3_as_tcxo_ctrl>

	sx126x_cal(&hspi, SX126X_CAL_ALL);
 8000c10:	217f      	movs	r1, #127	; 0x7f
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <Tx_setup+0x164>)
 8000c14:	f000 f9d4 	bl	8000fc0 <sx126x_cal>

	HAL_Delay(50);
 8000c18:	2032      	movs	r0, #50	; 0x32
 8000c1a:	f000 fdbf 	bl	800179c <HAL_Delay>

	//sx126x_set_standby(&hspi1, 0);

	sx126x_set_reg_mode(&hspi, 0x01);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <Tx_setup+0x164>)
 8000c22:	f000 f9b3 	bl	8000f8c <sx126x_set_reg_mode>

	//set image calibration
	uint8_t opcode = 0x98;
 8000c26:	2398      	movs	r3, #152	; 0x98
 8000c28:	72fb      	strb	r3, [r7, #11]
	uint8_t params1[4] = {0x6F,0x75};
 8000c2a:	f247 536f 	movw	r3, #30063	; 0x756f
 8000c2e:	603b      	str	r3, [r7, #0]
	writeCommand(opcode, params1, 2);
 8000c30:	4639      	mov	r1, r7
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	2202      	movs	r2, #2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fe7a 	bl	8000930 <writeCommand>
	sx126x_set_lora_mod_params(&hspi1, mod_params0);
	free(mod_params0);
	*/

	//packet params
	struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8000c3c:	2006      	movs	r0, #6
 8000c3e:	f003 fdfd 	bl	800483c <malloc>
 8000c42:	4603      	mov	r3, r0
 8000c44:	607b      	str	r3, [r7, #4]
	lora_params->preamble_len_in_symb=12;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	220c      	movs	r2, #12
 8000c4a:	801a      	strh	r2, [r3, #0]
	lora_params->header_type=0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	709a      	strb	r2, [r3, #2]
	lora_params->pld_len_in_bytes=0xFF;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	70da      	strb	r2, [r3, #3]
	lora_params->crc_is_on=1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	711a      	strb	r2, [r3, #4]
	lora_params->invert_iq_is_on=0;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	715a      	strb	r2, [r3, #5]
	sx126x_set_lora_pkt_params(&hspi, lora_params);
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <Tx_setup+0x164>)
 8000c68:	f000 fbcc 	bl	8001404 <sx126x_set_lora_pkt_params>
	free(lora_params);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f003 fded 	bl	800484c <free>

	//sx126x_set_dio_irq_params(&hspi1,1023,0b1000000001,0,0);

}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000a0 	.word	0x200000a0
 8000c80:	2000009c 	.word	0x2000009c
 8000c84:	20000098 	.word	0x20000098
 8000c88:	20000096 	.word	0x20000096
 8000c8c:	200000b4 	.word	0x200000b4
 8000c90:	1ab3f000 	.word	0x1ab3f000

08000c94 <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b0a4      	sub	sp, #144	; 0x90
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
 8000ca0:	466b      	mov	r3, sp
 8000ca2:	461d      	mov	r5, r3

	uint8_t type;
	sx126x_get_pkt_type(&hspi, &type);
 8000ca4:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4886      	ldr	r0, [pc, #536]	; (8000ec4 <TxProtocol+0x230>)
 8000cac:	f000 fb36 	bl	800131c <sx126x_get_pkt_type>
	char b[100];
	sprintf(b, "Type: %u\n", type);
 8000cb0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4983      	ldr	r1, [pc, #524]	; (8000ec8 <TxProtocol+0x234>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fe9d 	bl	80049fc <siprintf>
	transmitBuffer(b);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc74 	bl	80005b4 <transmitBuffer>

	HAL_StatusTypeDef command_status;
	sx126x_irq_mask_t irq = SX126X_IRQ_ALL;
 8000ccc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000cd0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	command_status = sx126x_clear_irq_status(&hspi, irq);
 8000cd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000cd8:	4619      	mov	r1, r3
 8000cda:	487a      	ldr	r0, [pc, #488]	; (8000ec4 <TxProtocol+0x230>)
 8000cdc:	f000 fa62 	bl	80011a4 <sx126x_clear_irq_status>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

	uint8_t opcode = 0x0E;
 8000ce6:	230e      	movs	r3, #14
 8000ce8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	uint8_t params[data_length+1];
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	1c5c      	adds	r4, r3, #1
 8000cf0:	1e63      	subs	r3, r4, #1
 8000cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f04f 0100 	mov.w	r1, #0
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	00cb      	lsls	r3, r1, #3
 8000d08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d0c:	00c2      	lsls	r2, r0, #3
 8000d0e:	4623      	mov	r3, r4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f04f 0100 	mov.w	r1, #0
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	00cb      	lsls	r3, r1, #3
 8000d20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d24:	00c2      	lsls	r2, r0, #3
 8000d26:	4623      	mov	r3, r4
 8000d28:	3307      	adds	r3, #7
 8000d2a:	08db      	lsrs	r3, r3, #3
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d32:	466b      	mov	r3, sp
 8000d34:	3300      	adds	r3, #0
 8000d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	params[0] = 0;
 8000d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < data_length; i++){
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d48:	e00f      	b.n	8000d6a <TxProtocol+0xd6>
		params[i+1] = data[i];
 8000d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	441a      	add	r2, r3
 8000d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d56:	3301      	adds	r3, #1
 8000d58:	7811      	ldrb	r1, [r2, #0]
 8000d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d5e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < data_length; i++){
 8000d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d64:	3301      	adds	r3, #1
 8000d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbea      	blt.n	8000d4a <TxProtocol+0xb6>
	}
	writeCommand(opcode, params, data_length+1);
 8000d74:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fdd3 	bl	8000930 <writeCommand>
	//command_status = sx126x_write_buffer(&hspi, 0, data, data_length);

	//packet params
	struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f003 fd56 	bl	800483c <malloc>
 8000d90:	4603      	mov	r3, r0
 8000d92:	67fb      	str	r3, [r7, #124]	; 0x7c
	lora_params->preamble_len_in_symb=12;
 8000d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d96:	220c      	movs	r2, #12
 8000d98:	801a      	strh	r2, [r3, #0]
	lora_params->header_type=0;
 8000d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	709a      	strb	r2, [r3, #2]
	lora_params->pld_len_in_bytes=data_length;
 8000da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	70da      	strb	r2, [r3, #3]
	lora_params->crc_is_on=1;
 8000da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da8:	2201      	movs	r2, #1
 8000daa:	711a      	strb	r2, [r3, #4]
	lora_params->invert_iq_is_on=0;
 8000dac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dae:	2200      	movs	r2, #0
 8000db0:	715a      	strb	r2, [r3, #5]
	command_status = sx126x_set_lora_pkt_params(&hspi, lora_params);
 8000db2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000db4:	4843      	ldr	r0, [pc, #268]	; (8000ec4 <TxProtocol+0x230>)
 8000db6:	f000 fb25 	bl	8001404 <sx126x_set_lora_pkt_params>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
	free(lora_params);
 8000dc0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000dc2:	f003 fd43 	bl	800484c <free>
	command_status = sx126x_set_tx(&hspi, 6000);
 8000dc6:	f241 7170 	movw	r1, #6000	; 0x1770
 8000dca:	483e      	ldr	r0, [pc, #248]	; (8000ec4 <TxProtocol+0x230>)
 8000dcc:	f000 f8a4 	bl	8000f18 <sx126x_set_tx>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
	HAL_Delay(1400);
 8000dd6:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8000dda:	f000 fcdf 	bl	800179c <HAL_Delay>

	if (command_status != HAL_OK) {
 8000dde:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d01b      	beq.n	8000e1e <TxProtocol+0x18a>
		transmitBuffer("setTx Failed\n");
 8000de6:	4839      	ldr	r0, [pc, #228]	; (8000ecc <TxProtocol+0x238>)
 8000de8:	f7ff fbe4 	bl	80005b4 <transmitBuffer>
		transmitBuffer("Set TX command status: ");
 8000dec:	4838      	ldr	r0, [pc, #224]	; (8000ed0 <TxProtocol+0x23c>)
 8000dee:	f7ff fbe1 	bl	80005b4 <transmitBuffer>
		transmitStatus(command_status);
 8000df2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fbfa 	bl	80005f0 <transmitStatus>

		sx126x_chip_status_t device_status;
		command_status = sx126x_get_status(&hspi, &device_status);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	4830      	ldr	r0, [pc, #192]	; (8000ec4 <TxProtocol+0x230>)
 8000e04:	f000 fb90 	bl	8001528 <sx126x_get_status>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

		transmitBuffer("Get Status command status: ");
 8000e0e:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <TxProtocol+0x240>)
 8000e10:	f7ff fbd0 	bl	80005b4 <transmitBuffer>
		transmitStatus(command_status);
 8000e14:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbe9 	bl	80005f0 <transmitStatus>
	}

	//get irq status
	uint8_t opcode3 = 0x12;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	uint8_t params3[3] = {0,0,0};
 8000e24:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <TxProtocol+0x244>)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	8019      	strh	r1, [r3, #0]
 8000e30:	3302      	adds	r3, #2
 8000e32:	0c12      	lsrs	r2, r2, #16
 8000e34:	701a      	strb	r2, [r3, #0]
	uint8_t data3[3];
	readCommand(opcode3, params3, data3, 3);
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	f107 0110 	add.w	r1, r7, #16
 8000e3e:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 8000e42:	2303      	movs	r3, #3
 8000e44:	f7ff fdb8 	bl	80009b8 <readCommand>

	irq = data3[2] | data3[1] << 8;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	7b7b      	ldrb	r3, [r7, #13]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) ) {
 8000e5a:	e012      	b.n	8000e82 <TxProtocol+0x1ee>
		readCommand(opcode3, params3, data3, 3);
 8000e5c:	f107 020c 	add.w	r2, r7, #12
 8000e60:	f107 0110 	add.w	r1, r7, #16
 8000e64:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f7ff fda5 	bl	80009b8 <readCommand>
		irq = data3[2] << 8 | data3[1] << 8;
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) ) {
 8000e82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <TxProtocol+0x206>
 8000e8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0e0      	beq.n	8000e5c <TxProtocol+0x1c8>
	}
	if ((irq & SX126X_IRQ_TIMEOUT)) {
 8000e9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <TxProtocol+0x21a>
		transmitBuffer("TIMEOUT!\n");
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <TxProtocol+0x248>)
 8000ea8:	f7ff fb84 	bl	80005b4 <transmitBuffer>
 8000eac:	e002      	b.n	8000eb4 <TxProtocol+0x220>
	} else {
		transmitBuffer("TX DONE!\n");
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <TxProtocol+0x24c>)
 8000eb0:	f7ff fb80 	bl	80005b4 <transmitBuffer>
	}

	//setup();

	HAL_Delay(200);
 8000eb4:	20c8      	movs	r0, #200	; 0xc8
 8000eb6:	f000 fc71 	bl	800179c <HAL_Delay>
 8000eba:	46ad      	mov	sp, r5
}
 8000ebc:	bf00      	nop
 8000ebe:	3790      	adds	r7, #144	; 0x90
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec4:	200000b4 	.word	0x200000b4
 8000ec8:	08005178 	.word	0x08005178
 8000ecc:	08005184 	.word	0x08005184
 8000ed0:	08005194 	.word	0x08005194
 8000ed4:	080051ac 	.word	0x080051ac
 8000ed8:	080051e0 	.word	0x080051e0
 8000edc:	080051c8 	.word	0x080051c8
 8000ee0:	080051d4 	.word	0x080051d4

08000ee4 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8000efc:	f107 010c 	add.w	r1, r7, #12
 8000f00:	2300      	movs	r3, #0
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	2202      	movs	r2, #2
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fc91 	bl	8000830 <sx126x_hal_write>
 8000f0e:	4603      	mov	r3, r0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f28:	d301      	bcc.n	8000f2e <sx126x_set_tx+0x16>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e008      	b.n	8000f40 <sx126x_set_tx+0x28>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f000 fb50 	bl	80015d4 <sx126x_convert_timeout_in_ms_to_rtc_step>
 8000f34:	60f8      	str	r0, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8000f36:	68f9      	ldr	r1, [r7, #12]
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f805 	bl	8000f48 <sx126x_set_tx_with_timeout_in_rtc_step>
 8000f3e:	4603      	mov	r3, r0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 8000f56:	2383      	movs	r3, #131	; 0x83
 8000f58:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 8000f70:	f107 010c 	add.w	r1, r7, #12
 8000f74:	2300      	movs	r3, #0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff fc57 	bl	8000830 <sx126x_hal_write>
 8000f82:	4603      	mov	r3, r0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 8000f98:	2300      	movs	r3, #0
 8000f9a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 8000f9c:	2396      	movs	r3, #150	; 0x96
 8000f9e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 8000fa4:	f107 010c 	add.w	r1, r7, #12
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	2202      	movs	r2, #2
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fc3d 	bl	8000830 <sx126x_hal_write>
 8000fb6:	4603      	mov	r3, r0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 8000fd0:	2389      	movs	r3, #137	; 0x89
 8000fd2:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 8000fd8:	f107 010c 	add.w	r1, r7, #12
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fc23 	bl	8000830 <sx126x_hal_write>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	2300      	movs	r3, #0
 8001004:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 8001006:	2395      	movs	r3, #149	; 0x95
 8001008:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	785b      	ldrb	r3, [r3, #1]
 8001014:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	789b      	ldrb	r3, [r3, #2]
 800101a:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8001022:	f107 0108 	add.w	r1, r7, #8
 8001026:	2300      	movs	r3, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2205      	movs	r2, #5
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fbfe 	bl	8000830 <sx126x_hal_write>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af02      	add	r7, sp, #8
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800104a:	2300      	movs	r3, #0
 800104c:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800104e:	2393      	movs	r3, #147	; 0x93
 8001050:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8001056:	f107 010c 	add.w	r1, r7, #12
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	2202      	movs	r2, #2
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fbe4 	bl	8000830 <sx126x_hal_write>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	461a      	mov	r2, r3
 8001080:	460b      	mov	r3, r1
 8001082:	817b      	strh	r3, [r7, #10]
 8001084:	4613      	mov	r3, r2
 8001086:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <sx126x_write_register+0x50>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	82bb      	strh	r3, [r7, #20]
 800108e:	2300      	movs	r3, #0
 8001090:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 8001092:	230d      	movs	r3, #13
 8001094:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 8001096:	897b      	ldrh	r3, [r7, #10]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 80010a6:	7a7b      	ldrb	r3, [r7, #9]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f107 0114 	add.w	r1, r7, #20
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff fbbb 	bl	8000830 <sx126x_hal_write>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	08005214 	.word	0x08005214

080010c8 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	461a      	mov	r2, r3
 80010d4:	460b      	mov	r3, r1
 80010d6:	817b      	strh	r3, [r7, #10]
 80010d8:	4613      	mov	r3, r2
 80010da:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 80010e0:	2303      	movs	r3, #3
 80010e2:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 80010e4:	231d      	movs	r3, #29
 80010e6:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 80010e8:	897b      	ldrh	r3, [r7, #10]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 80010f2:	897b      	ldrh	r3, [r7, #10]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 80010f8:	7a7b      	ldrb	r3, [r7, #9]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f107 0110 	add.w	r1, r7, #16
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff fbcc 	bl	80008a4 <sx126x_hal_read>
 800110c:	4603      	mov	r3, r0
 800110e:	75fb      	strb	r3, [r7, #23]

    return status;
 8001110:	7dfb      	ldrb	r3, [r7, #23]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b08a      	sub	sp, #40	; 0x28
 800111e:	af02      	add	r7, sp, #8
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	4608      	mov	r0, r1
 8001124:	4611      	mov	r1, r2
 8001126:	461a      	mov	r2, r3
 8001128:	4603      	mov	r3, r0
 800112a:	817b      	strh	r3, [r7, #10]
 800112c:	460b      	mov	r3, r1
 800112e:	813b      	strh	r3, [r7, #8]
 8001130:	4613      	mov	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 8001142:	2308      	movs	r3, #8
 8001144:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 8001146:	897b      	ldrh	r3, [r7, #10]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	b29b      	uxth	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 8001156:	893b      	ldrh	r3, [r7, #8]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	b29b      	uxth	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 8001160:	893b      	ldrh	r3, [r7, #8]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 8001176:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 8001180:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001182:	b2db      	uxtb	r3, r3
 8001184:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8001186:	f107 0114 	add.w	r1, r7, #20
 800118a:	2300      	movs	r3, #0
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	2209      	movs	r2, #9
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fb4c 	bl	8000830 <sx126x_hal_write>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <sx126x_clear_irq_status>:

    return status;
}

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <sx126x_clear_irq_status+0x48>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	81bb      	strh	r3, [r7, #12]
 80011b6:	2300      	movs	r3, #0
 80011b8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 80011ba:	2302      	movs	r3, #2
 80011bc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	2300      	movs	r3, #0
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2203      	movs	r2, #3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fb28 	bl	8000830 <sx126x_hal_write>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	08005214 	.word	0x08005214

080011f0 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 80011fc:	2300      	movs	r3, #0
 80011fe:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 8001200:	239d      	movs	r3, #157	; 0x9d
 8001202:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8001208:	f107 010c 	add.w	r1, r7, #12
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	2202      	movs	r2, #2
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fb0b 	bl	8000830 <sx126x_hal_write>
 800121a:	4603      	mov	r3, r0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	460b      	mov	r3, r1
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	2300      	movs	r3, #0
 8001238:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800123a:	2397      	movs	r3, #151	; 0x97
 800123c:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0c1b      	lsrs	r3, r3, #16
 8001246:	b2db      	uxtb	r3, r3
 8001248:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8001258:	f107 0110 	add.w	r1, r7, #16
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	2205      	movs	r2, #5
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff fae3 	bl	8000830 <sx126x_hal_write>
 800126a:	4603      	mov	r3, r0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f000 f982 	bl	8001588 <sx126x_convert_freq_in_hz_to_pll_step>
 8001284:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f805 	bl	8001298 <sx126x_set_rf_freq_in_pll_steps>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	2300      	movs	r3, #0
 80012a8:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 80012aa:	2386      	movs	r3, #134	; 0x86
 80012ac:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	0e1b      	lsrs	r3, r3, #24
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 80012cc:	f107 0108 	add.w	r1, r7, #8
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2205      	movs	r2, #5
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff faa9 	bl	8000830 <sx126x_hal_write>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 80012f4:	2300      	movs	r3, #0
 80012f6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 80012f8:	238a      	movs	r3, #138	; 0x8a
 80012fa:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	2300      	movs	r3, #0
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	2202      	movs	r2, #2
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fa8f 	bl	8000830 <sx126x_hal_write>
 8001312:	4603      	mov	r3, r0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <sx126x_get_pkt_type>:

sx126x_status_t sx126x_get_pkt_type( const void* context, sx126x_pkt_type_t* pkt_type )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af02      	add	r7, sp, #8
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_PKT_TYPE] = { 0 };
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <sx126x_get_pkt_type+0x44>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	81bb      	strh	r3, [r7, #12]
 800132c:	2300      	movs	r3, #0
 800132e:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                        = SX126X_STATUS_ERROR;
 8001330:	2303      	movs	r3, #3
 8001332:	73fb      	strb	r3, [r7, #15]
    uint8_t         pkt_type_raw[2];

    buf[0] = SX126X_GET_PKT_TYPE;
 8001334:	2311      	movs	r3, #17
 8001336:	733b      	strb	r3, [r7, #12]

    status    = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, pkt_type_raw, 1 );
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	f107 010c 	add.w	r1, r7, #12
 8001340:	2201      	movs	r2, #1
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	2203      	movs	r2, #3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff faac 	bl	80008a4 <sx126x_hal_read>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
    *pkt_type = ( sx126x_pkt_type_t ) pkt_type_raw[1];
 8001350:	7a7a      	ldrb	r2, [r7, #9]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	701a      	strb	r2, [r3, #0]

    return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08005214 	.word	0x08005214

08001364 <sx126x_set_tx_params>:

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
 8001370:	4613      	mov	r3, r2
 8001372:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <sx126x_set_tx_params+0x44>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	81bb      	strh	r3, [r7, #12]
 800137a:	2300      	movs	r3, #0
 800137c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800137e:	238e      	movs	r3, #142	; 0x8e
 8001380:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 8001386:	78bb      	ldrb	r3, [r7, #2]
 8001388:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800138a:	f107 010c 	add.w	r1, r7, #12
 800138e:	2300      	movs	r3, #0
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2300      	movs	r3, #0
 8001394:	2203      	movs	r2, #3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fa4a 	bl	8000830 <sx126x_hal_write>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08005214 	.word	0x08005214

080013ac <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 80013b6:	2303      	movs	r3, #3
 80013b8:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	2300      	movs	r3, #0
 80013c0:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 80013c2:	238b      	movs	r3, #139	; 0x8b
 80013c4:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	785b      	ldrb	r3, [r3, #1]
 80013d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	78db      	ldrb	r3, [r3, #3]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2205      	movs	r2, #5
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fa1d 	bl	8000830 <sx126x_hal_write>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800140e:	2303      	movs	r3, #3
 8001410:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2100      	movs	r1, #0
 800141c:	460a      	mov	r2, r1
 800141e:	801a      	strh	r2, [r3, #0]
 8001420:	460a      	mov	r2, r1
 8001422:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 8001424:	238c      	movs	r3, #140	; 0x8c
 8001426:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	791b      	ldrb	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <sx126x_set_lora_pkt_params+0x50>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <sx126x_set_lora_pkt_params+0x52>
 8001454:	2300      	movs	r3, #0
 8001456:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	795b      	ldrb	r3, [r3, #5]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <sx126x_set_lora_pkt_params+0x60>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <sx126x_set_lora_pkt_params+0x62>
 8001464:	2300      	movs	r3, #0
 8001466:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8001468:	f107 0110 	add.w	r1, r7, #16
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	2207      	movs	r2, #7
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff f9db 	bl	8000830 <sx126x_hal_write>
 800147a:	4603      	mov	r3, r0
 800147c:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d127      	bne.n	80014d4 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 8001488:	f107 020f 	add.w	r2, r7, #15
 800148c:	2301      	movs	r3, #1
 800148e:	f240 7136 	movw	r1, #1846	; 0x736
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe18 	bl	80010c8 <sx126x_read_register>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e004      	b.n	80014c0 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 80014c0:	f107 020f 	add.w	r2, r7, #15
 80014c4:	2301      	movs	r3, #1
 80014c6:	f240 7136 	movw	r1, #1846	; 0x736
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fdd2 	bl	8001074 <sx126x_write_register>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	4613      	mov	r3, r2
 80014ee:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <sx126x_set_buffer_base_address+0x44>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	81bb      	strh	r3, [r7, #12]
 80014f6:	2300      	movs	r3, #0
 80014f8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 80014fa:	238f      	movs	r3, #143	; 0x8f
 80014fc:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 8001502:	78bb      	ldrb	r3, [r7, #2]
 8001504:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 8001506:	f107 010c 	add.w	r1, r7, #12
 800150a:	2300      	movs	r3, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	2203      	movs	r2, #3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff f98c 	bl	8000830 <sx126x_hal_write>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	08005214 	.word	0x08005214

08001528 <sx126x_get_status>:
//
// Communication Status Information
//

sx126x_status_t sx126x_get_status( const void* context, sx126x_chip_status_t* radio_status )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_STATUS] = { 0 };
 8001532:	2300      	movs	r3, #0
 8001534:	733b      	strb	r3, [r7, #12]
    uint8_t         status_local                = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	72fb      	strb	r3, [r7, #11]
    sx126x_status_t status                      = SX126X_STATUS_ERROR;
 800153a:	2303      	movs	r3, #3
 800153c:	73fb      	strb	r3, [r7, #15]

    buf[0] = SX126X_GET_STATUS;
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_STATUS, &status_local, 1 );
 8001542:	f107 030b 	add.w	r3, r7, #11
 8001546:	f107 010c 	add.w	r1, r7, #12
 800154a:	2201      	movs	r2, #1
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff f9a7 	bl	80008a4 <sx126x_hal_read>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]

    if( status == SX126X_STATUS_OK )
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10d      	bne.n	800157c <sx126x_get_status+0x54>
    {
        radio_status->cmd_status =
            ( sx126x_cmd_status_t )( ( status_local & SX126X_CMD_STATUS_MASK ) >> SX126X_CMD_STATUS_POS );
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	b2da      	uxtb	r2, r3
        radio_status->cmd_status =
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	701a      	strb	r2, [r3, #0]
        radio_status->chip_mode =
            ( sx126x_chip_modes_t )( ( status_local & SX126X_CHIP_MODES_MASK ) >> SX126X_CHIP_MODES_POS );
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	b2da      	uxtb	r2, r3
        radio_status->chip_mode =
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	705a      	strb	r2, [r3, #1]
    }

    return status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0b1b      	lsrs	r3, r3, #12
 800159a:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f643 5209 	movw	r2, #15625	; 0x3d09
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80015b8:	3304      	adds	r3, #4
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 80015bc:	fba1 1303 	umull	r1, r3, r1, r3
 80015c0:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80015c2:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	431bde83 	.word	0x431bde83

080015d4 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	019b      	lsls	r3, r3, #6
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f003 f8e4 	bl	80047e8 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	220c      	movs	r2, #12
 8001624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20010000 	.word	0x20010000
 800164c:	00000400 	.word	0x00000400
 8001650:	20000118 	.word	0x20000118
 8001654:	20000220 	.word	0x20000220

08001658 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001682:	490e      	ldr	r1, [pc, #56]	; (80016bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <LoopForever+0xe>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001698:	4c0b      	ldr	r4, [pc, #44]	; (80016c8 <LoopForever+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a6:	f7ff ffd7 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f003 f8a3 	bl	80047f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ae:	f7fe fdef 	bl	8000290 <main>

080016b2 <LoopForever>:

LoopForever:
    b LoopForever
 80016b2:	e7fe      	b.n	80016b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016c0:	0800528c 	.word	0x0800528c
  ldr r2, =_sbss
 80016c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016c8:	20000220 	.word	0x20000220

080016cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC1_2_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_Init+0x28>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_Init+0x28>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f931 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e6:	200f      	movs	r0, #15
 80016e8:	f000 f808 	bl	80016fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ec:	f7fe ffca 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40022000 	.word	0x40022000

080016fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x54>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_InitTick+0x58>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	fbb2 f3f3 	udiv	r3, r2, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f93b 	bl	8001996 <HAL_SYSTICK_Config>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e00e      	b.n	8001748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d80a      	bhi.n	8001746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 f911 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <HAL_InitTick+0x5c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	20000008 	.word	0x20000008
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	2000020c 	.word	0x2000020c

08001784 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;  
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000020c 	.word	0x2000020c

0800179c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ffee 	bl	8001784 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_Delay+0x44>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffde 	bl	8001784 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff47 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff5c 	bl	800182c <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffb0 	bl	8001904 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	e160      	b.n	8001c82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8152 	beq.w	8001c7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d005      	beq.n	80019f0 <HAL_GPIO_Init+0x40>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 0201 	and.w	r2, r3, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d017      	beq.n	8001a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d123      	bne.n	8001ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	6939      	ldr	r1, [r7, #16]
 8001ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0203 	and.w	r2, r3, #3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80ac 	beq.w	8001c7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b24:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b3c:	4a59      	ldr	r2, [pc, #356]	; (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b66:	d025      	beq.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a4f      	ldr	r2, [pc, #316]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d01f      	beq.n	8001bb0 <HAL_GPIO_Init+0x200>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <HAL_GPIO_Init+0x2fc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d019      	beq.n	8001bac <HAL_GPIO_Init+0x1fc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4d      	ldr	r2, [pc, #308]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_GPIO_Init+0x1f8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1f4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <HAL_GPIO_Init+0x308>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1f0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a4a      	ldr	r2, [pc, #296]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1ec>
 8001b98:	2306      	movs	r3, #6
 8001b9a:	e00c      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	e00a      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	e008      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e004      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_GPIO_Init+0x206>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc6:	4937      	ldr	r1, [pc, #220]	; (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f47f ae97 	bne.w	80019c0 <HAL_GPIO_Init+0x10>
  }
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000c00 	.word	0x48000c00
 8001cb4:	48001000 	.word	0x48001000
 8001cb8:	48001400 	.word	0x48001400
 8001cbc:	48001800 	.word	0x48001800
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f000 bf01 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8160 	beq.w	800200e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d4e:	4bae      	ldr	r3, [pc, #696]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d00c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5a:	4bab      	ldr	r3, [pc, #684]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d159      	bne.n	8001e1a <HAL_RCC_OscConfig+0xf6>
 8001d66:	4ba8      	ldr	r3, [pc, #672]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d72:	d152      	bne.n	8001e1a <HAL_RCC_OscConfig+0xf6>
 8001d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d78:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_OscConfig+0x82>
 8001da0:	4b99      	ldr	r3, [pc, #612]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0xae>
 8001da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001daa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001dce:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001dda:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001de6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8102 	beq.w	800200c <HAL_RCC_OscConfig+0x2e8>
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 80fc 	bne.w	800200c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f000 be93 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d106      	bne.n	8001e34 <HAL_RCC_OscConfig+0x110>
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e030      	b.n	8001e96 <HAL_RCC_OscConfig+0x172>
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x134>
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x172>
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x15a>
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a67      	ldr	r2, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a64      	ldr	r2, [pc, #400]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e00b      	b.n	8001e96 <HAL_RCC_OscConfig+0x172>
 8001e7e:	4b62      	ldr	r3, [pc, #392]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a61      	ldr	r2, [pc, #388]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b5f      	ldr	r3, [pc, #380]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a5e      	ldr	r2, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d059      	beq.n	8001f54 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fc70 	bl	8001784 <HAL_GetTick>
 8001ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fc6b 	bl	8001784 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d902      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f000 be40 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>
 8001ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001ed4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x1ce>
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x1fa>
 8001ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f0e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f22:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f26:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0ab      	beq.n	8001eaa <HAL_RCC_OscConfig+0x186>
 8001f52:	e05c      	b.n	800200e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fc16 	bl	8001784 <HAL_GetTick>
 8001f58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fc11 	bl	8001784 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d902      	bls.n	8001f74 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f000 bde6 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>
 8001f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x282>
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2ae>
 8001fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001faa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_RCC_OscConfig+0x2e4>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001fda:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001fe6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 021f 	and.w	r2, r2, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ab      	bne.n	8001f5e <HAL_RCC_OscConfig+0x23a>
 8002006:	e002      	b.n	800200e <HAL_RCC_OscConfig+0x2ea>
 8002008:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8170 	beq.w	80022fe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800201e:	4bd0      	ldr	r3, [pc, #832]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800202a:	4bcd      	ldr	r3, [pc, #820]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d16d      	bne.n	8002112 <HAL_RCC_OscConfig+0x3ee>
 8002036:	4bca      	ldr	r3, [pc, #808]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800203e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002042:	d166      	bne.n	8002112 <HAL_RCC_OscConfig+0x3ee>
 8002044:	2302      	movs	r3, #2
 8002046:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002056:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0x350>
 800206e:	4bbc      	ldr	r3, [pc, #752]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e013      	b.n	800209c <HAL_RCC_OscConfig+0x378>
 8002074:	2302      	movs	r3, #2
 8002076:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800208c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002098:	4bb1      	ldr	r3, [pc, #708]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2202      	movs	r2, #2
 800209e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80020a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80020ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020b2:	fab2 f282 	clz	r2, r2
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f042 0220 	orr.w	r2, r2, #32
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_RCC_OscConfig+0x3ba>
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d002      	beq.n	80020de <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	f000 bd31 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	21f8      	movs	r1, #248	; 0xf8
 80020ee:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80020f6:	fa91 f1a1 	rbit	r1, r1
 80020fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80020fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002102:	fab1 f181 	clz	r1, r1
 8002106:	b2c9      	uxtb	r1, r1
 8002108:	408b      	lsls	r3, r1
 800210a:	4995      	ldr	r1, [pc, #596]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002110:	e0f5      	b.n	80022fe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8085 	beq.w	8002228 <HAL_RCC_OscConfig+0x504>
 800211e:	2301      	movs	r3, #1
 8002120:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002130:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	461a      	mov	r2, r3
 8002146:	2301      	movs	r3, #1
 8002148:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fb1b 	bl	8001784 <HAL_GetTick>
 800214e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff fb16 	bl	8001784 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d902      	bls.n	800216a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	f000 bceb 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800217c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d102      	bne.n	800219a <HAL_RCC_OscConfig+0x476>
 8002194:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	e013      	b.n	80021c2 <HAL_RCC_OscConfig+0x49e>
 800219a:	2302      	movs	r3, #2
 800219c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021be:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2202      	movs	r2, #2
 80021c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80021d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	f002 021f 	and.w	r2, r2, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f202 	lsl.w	r2, r1, r2
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0af      	beq.n	8002154 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	21f8      	movs	r1, #248	; 0xf8
 8002204:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800220c:	fa91 f1a1 	rbit	r1, r1
 8002210:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002214:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002218:	fab1 f181 	clz	r1, r1
 800221c:	b2c9      	uxtb	r1, r1
 800221e:	408b      	lsls	r3, r1
 8002220:	494f      	ldr	r1, [pc, #316]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
 8002226:	e06a      	b.n	80022fe <HAL_RCC_OscConfig+0x5da>
 8002228:	2301      	movs	r3, #1
 800222a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800223a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff fa96 	bl	8001784 <HAL_GetTick>
 8002258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fa91 	bl	8001784 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d902      	bls.n	8002274 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	f000 bc66 	b.w	8002b40 <HAL_RCC_OscConfig+0xe1c>
 8002274:	2302      	movs	r3, #2
 8002276:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002286:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x580>
 800229e:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0x5a8>
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x63c>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80022d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80022de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f042 0220 	orr.w	r2, r2, #32
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f002 021f 	and.w	r2, r2, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1af      	bne.n	800225e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80da 	beq.w	80024c2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d069      	beq.n	80023ec <HAL_RCC_OscConfig+0x6c8>
 8002318:	2301      	movs	r3, #1
 800231a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800232a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x640>)
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	461a      	mov	r2, r3
 800233e:	2301      	movs	r3, #1
 8002340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff fa1f 	bl	8001784 <HAL_GetTick>
 8002346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e00d      	b.n	8002368 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff fa1a 	bl	8001784 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d905      	bls.n	8002368 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e3ef      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 8002360:	40021000 	.word	0x40021000
 8002364:	10908120 	.word	0x10908120
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ac:	4ba4      	ldr	r3, [pc, #656]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80023ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023b4:	2102      	movs	r1, #2
 80023b6:	6019      	str	r1, [r3, #0]
 80023b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f1a3 	rbit	r1, r3
 80023c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023c6:	6019      	str	r1, [r3, #0]
  return result;
 80023c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0b0      	beq.n	800234c <HAL_RCC_OscConfig+0x628>
 80023ea:	e06a      	b.n	80024c2 <HAL_RCC_OscConfig+0x79e>
 80023ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002402:	601a      	str	r2, [r3, #0]
  return result;
 8002404:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002408:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <HAL_RCC_OscConfig+0x920>)
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	461a      	mov	r2, r3
 800241a:	2300      	movs	r3, #0
 800241c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff f9b1 	bl	8001784 <HAL_GetTick>
 8002422:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002426:	e009      	b.n	800243c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff f9ac 	bl	8001784 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e381      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 800243c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002458:	2202      	movs	r2, #2
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	fa93 f2a3 	rbit	r2, r3
 8002466:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002482:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b6e      	ldr	r3, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800248c:	2102      	movs	r1, #2
 800248e:	6019      	str	r1, [r3, #0]
 8002490:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f1a3 	rbit	r1, r3
 800249a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800249e:	6019      	str	r1, [r3, #0]
  return result;
 80024a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1b2      	bne.n	8002428 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8157 	beq.w	8002780 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b56      	ldr	r3, [pc, #344]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a55      	ldr	r2, [pc, #340]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	61d3      	str	r3, [r2, #28]
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b4f      	ldr	r3, [pc, #316]	; (8002648 <HAL_RCC_OscConfig+0x924>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x924>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_RCC_OscConfig+0x924>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7ff f92f 	bl	8001784 <HAL_GetTick>
 8002526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	e009      	b.n	8002540 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252c:	f7ff f92a 	bl	8001784 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e2ff      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x924>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ef      	beq.n	800252c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x840>
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a39      	ldr	r2, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	e02f      	b.n	80025c4 <HAL_RCC_OscConfig+0x8a0>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x864>
 800256e:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a33      	ldr	r2, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6213      	str	r3, [r2, #32]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0x8a0>
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x888>
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0x8a0>
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d06a      	beq.n	80026a4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7ff f8d9 	bl	8001784 <HAL_GetTick>
 80025d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7ff f8d4 	bl	8001784 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e2a7      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 80025f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025f4:	2202      	movs	r2, #2
 80025f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800260c:	2202      	movs	r2, #2
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800261e:	601a      	str	r2, [r3, #0]
  return result;
 8002620:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x928>
 800263a:	4b01      	ldr	r3, [pc, #4]	; (8002640 <HAL_RCC_OscConfig+0x91c>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	e013      	b.n	8002668 <HAL_RCC_OscConfig+0x944>
 8002640:	40021000 	.word	0x40021000
 8002644:	10908120 	.word	0x10908120
 8002648:	40007000 	.word	0x40007000
 800264c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002650:	2202      	movs	r2, #2
 8002652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	4bc0      	ldr	r3, [pc, #768]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800266c:	2102      	movs	r1, #2
 800266e:	6011      	str	r1, [r2, #0]
 8002670:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	fa92 f1a2 	rbit	r1, r2
 800267a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800267e:	6011      	str	r1, [r2, #0]
  return result;
 8002680:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	fab2 f282 	clz	r2, r2
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f002 021f 	and.w	r2, r2, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d09a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x8b4>
 80026a2:	e063      	b.n	800276c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7ff f86e 	bl	8001784 <HAL_GetTick>
 80026a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00b      	b.n	80026c6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7ff f869 	bl	8001784 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e23c      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 80026c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026ca:	2202      	movs	r2, #2
 80026cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	fa93 f2a3 	rbit	r2, r3
 80026d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026f4:	601a      	str	r2, [r3, #0]
  return result;
 80026f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d102      	bne.n	8002716 <HAL_RCC_OscConfig+0x9f2>
 8002710:	4b95      	ldr	r3, [pc, #596]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	e00d      	b.n	8002732 <HAL_RCC_OscConfig+0xa0e>
 8002716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800271a:	2202      	movs	r2, #2
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4b8e      	ldr	r3, [pc, #568]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002736:	2102      	movs	r1, #2
 8002738:	6011      	str	r1, [r2, #0]
 800273a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	fa92 f1a2 	rbit	r1, r2
 8002744:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002748:	6011      	str	r1, [r2, #0]
  return result;
 800274a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	fab2 f282 	clz	r2, r2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1a0      	bne.n	80026ae <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800276c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	4a7b      	ldr	r2, [pc, #492]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 81d9 	beq.w	8002b3e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	f000 81a6 	beq.w	8002ae6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	f040 811e 	bne.w	80029e2 <HAL_RCC_OscConfig+0xcbe>
 80027a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027be:	601a      	str	r2, [r3, #0]
  return result;
 80027c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	461a      	mov	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe ffd2 	bl	8001784 <HAL_GetTick>
 80027e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	e009      	b.n	80027fa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe ffcd 	bl	8001784 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1a2      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 80027fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_RCC_OscConfig+0xb10>
 800282e:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e01b      	b.n	800286c <HAL_RCC_OscConfig+0xb48>
 8002834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800283c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	fa93 f2a3 	rbit	r2, r3
 8002848:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	fa92 f1a2 	rbit	r1, r2
 8002880:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002884:	6011      	str	r1, [r2, #0]
  return result;
 8002886:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f042 0220 	orr.w	r2, r2, #32
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f002 021f 	and.w	r2, r2, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d19e      	bne.n	80027e6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f023 020f 	bic.w	r2, r3, #15
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	492c      	ldr	r1, [pc, #176]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6a19      	ldr	r1, [r3, #32]
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	4925      	ldr	r1, [pc, #148]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028f0:	601a      	str	r2, [r3, #0]
  return result;
 80028f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002902:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	461a      	mov	r2, r3
 800290a:	2301      	movs	r3, #1
 800290c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe ff39 	bl	8001784 <HAL_GetTick>
 8002912:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002916:	e009      	b.n	800292c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe ff34 	bl	8001784 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e109      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 800292c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800294a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0xc48>
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <HAL_RCC_OscConfig+0xc44>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e01e      	b.n	80029a4 <HAL_RCC_OscConfig+0xc80>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_RCC_OscConfig+0xe28>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029bc:	6011      	str	r1, [r2, #0]
  return result;
 80029be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f002 021f 	and.w	r2, r2, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d09b      	beq.n	8002918 <HAL_RCC_OscConfig+0xbf4>
 80029e0:	e0ad      	b.n	8002b3e <HAL_RCC_OscConfig+0xe1a>
 80029e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029fa:	601a      	str	r2, [r3, #0]
  return result;
 80029fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe feb4 	bl	8001784 <HAL_GetTick>
 8002a1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe feaf 	bl	8001784 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e084      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
 8002a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	fa93 f2a3 	rbit	r2, r3
 8002a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4e:	601a      	str	r2, [r3, #0]
  return result;
 8002a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_OscConfig+0xd4c>
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_RCC_OscConfig+0xe28>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e01b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd84>
 8002a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f107 0320 	add.w	r3, r7, #32
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f107 0318 	add.w	r3, r7, #24
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_OscConfig+0xe28>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f107 0214 	add.w	r2, r7, #20
 8002aac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	f107 0214 	add.w	r2, r7, #20
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	fa92 f1a2 	rbit	r1, r2
 8002abc:	f107 0210 	add.w	r2, r7, #16
 8002ac0:	6011      	str	r1, [r2, #0]
  return result;
 8002ac2:	f107 0210 	add.w	r2, r7, #16
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	fab2 f282 	clz	r2, r2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d19e      	bne.n	8002a22 <HAL_RCC_OscConfig+0xcfe>
 8002ae4:	e02b      	b.n	8002b3e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e025      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_RCC_OscConfig+0xe28>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCC_OscConfig+0xe28>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d111      	bne.n	8002b3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d108      	bne.n	8002b3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09e      	sub	sp, #120	; 0x78
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e162      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b90      	ldr	r3, [pc, #576]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	498b      	ldr	r1, [pc, #556]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b89      	ldr	r3, [pc, #548]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e14a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	497f      	ldr	r1, [pc, #508]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80dc 	beq.w	8002d7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d13c      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xf6>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xa6>
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e00f      	b.n	8002c16 <HAL_RCC_ClockConfig+0xc6>
 8002bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	667b      	str	r3, [r7, #100]	; 0x64
 8002c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f042 0220 	orr.w	r2, r2, #32
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 021f 	and.w	r2, r2, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d17b      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0f3      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d13c      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x178>
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x128>
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	e00f      	b.n	8002c98 <HAL_RCC_ClockConfig+0x148>
 8002c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
 8002c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca0:	fa92 f2a2 	rbit	r2, r2
 8002ca4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f002 021f 	and.w	r2, r2, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13a      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b2      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e00d      	b.n	8002d0c <HAL_RCC_ClockConfig+0x1bc>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	61ba      	str	r2, [r7, #24]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	617a      	str	r2, [r7, #20]
  return result;
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	fab2 f282 	clz	r2, r2
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f002 021f 	and.w	r2, r2, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e079      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fd1a 	bl	8001784 <HAL_GetTick>
 8002d50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fd16 	bl	8001784 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e061      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d214      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	4906      	ldr	r1, [pc, #24]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e040      	b.n	8002e2e <HAL_RCC_ClockConfig+0x2de>
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	491a      	ldr	r1, [pc, #104]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002df2:	f000 f829 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_ClockConfig+0x2e8>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	22f0      	movs	r2, #240	; 0xf0
 8002e02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	fab2 f282 	clz	r2, r2
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	40d3      	lsrs	r3, r2
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x2ec>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_RCC_ClockConfig+0x2f0>)
 8002e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x2f4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fc68 	bl	80016fc <HAL_InitTick>
  
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3778      	adds	r7, #120	; 0x78
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08005218 	.word	0x08005218
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b08b      	sub	sp, #44	; 0x2c
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d002      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x30>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x36>
 8002e76:	e03f      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	e03f      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	607a      	str	r2, [r7, #4]
  return result;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	40d3      	lsrs	r3, r2
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	220f      	movs	r2, #15
 8002eac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	fa92 f2a2 	rbit	r2, r2
 8002eb4:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	fab2 f282 	clz	r2, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	40d3      	lsrs	r3, r2
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee0:	e007      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	623b      	str	r3, [r7, #32]
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002efa:	623b      	str	r3, [r7, #32]
      break;
 8002efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	372c      	adds	r7, #44	; 0x2c
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	007a1200 	.word	0x007a1200
 8002f14:	08005230 	.word	0x08005230
 8002f18:	08005240 	.word	0x08005240

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f3a:	f7ff ffef 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f3e:	4601      	mov	r1, r0
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	fa92 f2a2 	rbit	r2, r2
 8002f54:	603a      	str	r2, [r7, #0]
  return result;
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	40d3      	lsrs	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08005228 	.word	0x08005228

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f7e:	f7ff ffcd 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	fa92 f2a2 	rbit	r2, r2
 8002f98:	603a      	str	r2, [r7, #0]
  return result;
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	40d3      	lsrs	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08005228 	.word	0x08005228

08002fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b092      	sub	sp, #72	; 0x48
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80d4 	beq.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10e      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4a4a      	ldr	r2, [pc, #296]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	61d3      	str	r3, [r2, #28]
 8002ff8:	4b48      	ldr	r3, [pc, #288]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a41      	ldr	r2, [pc, #260]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fe fbaf 	bl	8001784 <HAL_GetTick>
 8003026:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe fbab 	bl	8001784 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1d6      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8084 	beq.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003064:	429a      	cmp	r2, r3
 8003066:	d07c      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	461a      	mov	r2, r3
 8003092:	2301      	movs	r3, #1
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	461a      	mov	r2, r3
 80030b6:	2300      	movs	r3, #0
 80030b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04b      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe fb5b 	bl	8001784 <HAL_GetTick>
 80030ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fb57 	bl	8001784 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e180      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80030e8:	2302      	movs	r3, #2
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
 80030f4:	2302      	movs	r3, #2
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003100:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d108      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003116:	4b01      	ldr	r3, [pc, #4]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	e00d      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800311c:	40021000 	.word	0x40021000
 8003120:	40007000 	.word	0x40007000
 8003124:	10908100 	.word	0x10908100
 8003128:	2302      	movs	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	4ba0      	ldr	r3, [pc, #640]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2202      	movs	r2, #2
 800313a:	613a      	str	r2, [r7, #16]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	fa92 f2a2 	rbit	r2, r2
 8003142:	60fa      	str	r2, [r7, #12]
  return result;
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	fab2 f282 	clz	r2, r2
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f002 021f 	and.w	r2, r2, #31
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0b7      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003162:	4b95      	ldr	r3, [pc, #596]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4992      	ldr	r1, [pc, #584]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003174:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4a8d      	ldr	r2, [pc, #564]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003194:	4b88      	ldr	r3, [pc, #544]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f023 0203 	bic.w	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4985      	ldr	r1, [pc, #532]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b2:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	497e      	ldr	r1, [pc, #504]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d0:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4976      	ldr	r1, [pc, #472]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ee:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f023 0210 	bic.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	496f      	ldr	r1, [pc, #444]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800320c:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	4967      	ldr	r1, [pc, #412]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f023 0220 	bic.w	r2, r3, #32
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4960      	ldr	r1, [pc, #384]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003248:	4b5b      	ldr	r3, [pc, #364]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	4958      	ldr	r1, [pc, #352]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	4951      	ldr	r1, [pc, #324]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003284:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4949      	ldr	r1, [pc, #292]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032a2:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4942      	ldr	r1, [pc, #264]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	493a      	ldr	r1, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032de:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4933      	ldr	r1, [pc, #204]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032fc:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	492b      	ldr	r1, [pc, #172]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	4924      	ldr	r1, [pc, #144]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	491c      	ldr	r1, [pc, #112]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	4915      	ldr	r1, [pc, #84]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	490d      	ldr	r1, [pc, #52]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339e:	4906      	ldr	r1, [pc, #24]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00c      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033b0:	4b01      	ldr	r3, [pc, #4]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	e002      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c4:	490b      	ldr	r1, [pc, #44]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3748      	adds	r7, #72	; 0x48
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e09d      	b.n	8003546 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d009      	beq.n	8003430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
 8003422:	e005      	b.n	8003430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd f93e 	bl	80006cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003466:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003470:	d902      	bls.n	8003478 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e002      	b.n	800347e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800347c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003486:	d007      	beq.n	8003498 <HAL_SPI_Init+0xa0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	ea42 0103 	orr.w	r1, r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	f003 0204 	and.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b088      	sub	sp, #32
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_SPI_Transmit+0x22>
 800356c:	2302      	movs	r3, #2
 800356e:	e158      	b.n	8003822 <HAL_SPI_Transmit+0x2d4>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003578:	f7fe f904 	bl	8001784 <HAL_GetTick>
 800357c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d002      	beq.n	8003594 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003592:	e13d      	b.n	8003810 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Transmit+0x52>
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a4:	e134      	b.n	8003810 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2203      	movs	r2, #3
 80035aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f0:	d10f      	bne.n	8003612 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d007      	beq.n	8003630 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003638:	d94b      	bls.n	80036d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0xfa>
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d13e      	bne.n	80036c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800366c:	e02b      	b.n	80036c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d112      	bne.n	80036a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a0:	e011      	b.n	80036c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a2:	f7fe f86f 	bl	8001784 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d803      	bhi.n	80036ba <HAL_SPI_Transmit+0x16c>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Transmit+0x172>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c4:	e0a4      	b.n	8003810 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ce      	bne.n	800366e <HAL_SPI_Transmit+0x120>
 80036d0:	e07c      	b.n	80037cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_SPI_Transmit+0x192>
 80036da:	8afb      	ldrh	r3, [r7, #22]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d170      	bne.n	80037c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d912      	bls.n	8003710 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b02      	subs	r3, #2
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800370e:	e058      	b.n	80037c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003736:	e044      	b.n	80037c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d12b      	bne.n	800379e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d912      	bls.n	8003776 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b02      	subs	r3, #2
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003774:	e025      	b.n	80037c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800379c:	e011      	b.n	80037c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800379e:	f7fd fff1 	bl	8001784 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d803      	bhi.n	80037b6 <HAL_SPI_Transmit+0x268>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d102      	bne.n	80037bc <HAL_SPI_Transmit+0x26e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037c0:	e026      	b.n	8003810 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1b5      	bne.n	8003738 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fb5b 	bl	8003e8c <SPI_EndRxTxTransaction>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e000      	b.n	8003810 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800380e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003820:	7ffb      	ldrb	r3, [r7, #31]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08a      	sub	sp, #40	; 0x28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003838:	2301      	movs	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x26>
 800384c:	2302      	movs	r3, #2
 800384e:	e1fb      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x41e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003858:	f7fd ff94 	bl	8001784 <HAL_GetTick>
 800385c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003864:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003874:	7efb      	ldrb	r3, [r7, #27]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d00e      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x6e>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003880:	d106      	bne.n	8003890 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_SPI_TransmitReceive+0x66>
 800388a:	7efb      	ldrb	r3, [r7, #27]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d003      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003896:	e1cd      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x80>
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80038b0:	e1c0      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d003      	beq.n	80038c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2205      	movs	r2, #5
 80038c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	887a      	ldrh	r2, [r7, #2]
 80038f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003908:	d802      	bhi.n	8003910 <HAL_SPI_TransmitReceive+0xe6>
 800390a:	8a3b      	ldrh	r3, [r7, #16]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d908      	bls.n	8003922 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391e:	605a      	str	r2, [r3, #4]
 8003920:	e007      	b.n	8003932 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003930:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d007      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003958:	d97c      	bls.n	8003a54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x13e>
 8003962:	8a7b      	ldrh	r3, [r7, #18]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d169      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800398c:	e056      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d11b      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x1aa>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x1aa>
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d113      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d11c      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x1f2>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	b292      	uxth	r2, r2
 80039fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a1c:	f7fd feb2 	bl	8001784 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d807      	bhi.n	8003a3c <HAL_SPI_TransmitReceive+0x212>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d003      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a3a:	e0fb      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1a3      	bne.n	800398e <HAL_SPI_TransmitReceive+0x164>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d19d      	bne.n	800398e <HAL_SPI_TransmitReceive+0x164>
 8003a52:	e0df      	b.n	8003c14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x23a>
 8003a5c:	8a7b      	ldrh	r3, [r7, #18]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 80cb 	bne.w	8003bfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d912      	bls.n	8003a94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b02      	subs	r3, #2
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a92:	e0b2      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aba:	e09e      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d134      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x30a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02f      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x30a>
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12c      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d912      	bls.n	8003b0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	1c9a      	adds	r2, r3, #2
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b02      	subs	r3, #2
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b08:	e012      	b.n	8003b30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	7812      	ldrb	r2, [r2, #0]
 8003b16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d148      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x3aa>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d042      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d923      	bls.n	8003ba2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	b292      	uxth	r2, r2
 8003b66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b02      	subs	r3, #2
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d81f      	bhi.n	8003bd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	e016      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f103 020c 	add.w	r2, r3, #12
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bd4:	f7fd fdd6 	bl	8001784 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d803      	bhi.n	8003bec <HAL_SPI_TransmitReceive+0x3c2>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x3c8>
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003bf8:	e01c      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f af5b 	bne.w	8003abc <HAL_SPI_TransmitReceive+0x292>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f47f af54 	bne.w	8003abc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f937 	bl	8003e8c <SPI_EndRxTxTransaction>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60
 8003c30:	e000      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c60:	f7fd fd90 	bl	8001784 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c70:	f7fd fd88 	bl	8001784 <HAL_GetTick>
 8003c74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	015b      	lsls	r3, r3, #5
 8003c7c:	0d1b      	lsrs	r3, r3, #20
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c86:	e054      	b.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d050      	beq.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c90:	f7fd fd78 	bl	8001784 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d902      	bls.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d13d      	bne.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbe:	d111      	bne.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc8:	d004      	beq.n	8003cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d107      	bne.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cec:	d10f      	bne.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e017      	b.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d19b      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000000 	.word	0x20000000

08003d60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d72:	f7fd fd07 	bl	8001784 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	4413      	add	r3, r2
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d82:	f7fd fcff 	bl	8001784 <HAL_GetTick>
 8003d86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d90:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00da      	lsls	r2, r3, #3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	0d1b      	lsrs	r3, r3, #20
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003da8:	e060      	b.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003db0:	d107      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d050      	beq.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dca:	f7fd fcdb 	bl	8001784 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d902      	bls.n	8003de0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d13d      	bne.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df8:	d111      	bne.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e02:	d004      	beq.n	8003e0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0c:	d107      	bne.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e26:	d10f      	bne.n	8003e48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e010      	b.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d196      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3728      	adds	r7, #40	; 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000000 	.word	0x20000000

08003e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff ff5b 	bl	8003d60 <SPI_WaitFifoStateUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e027      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff fec0 	bl	8003c50 <SPI_WaitFlagStateUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e014      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ff34 	bl	8003d60 <SPI_WaitFifoStateUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e000      	b.n	8003f10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e040      	b.n	8003fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc fc0a 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8c0 	bl	80040dc <UART_SetConfig>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e022      	b.n	8003fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa8a 	bl	8004488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fb11 	bl	80045cc <UART_CheckIdleState>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	f040 8082 	bne.w	80040d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Transmit+0x26>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e07a      	b.n	80040d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit+0x38>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e073      	b.n	80040d4 <HAL_UART_Transmit+0x120>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2221      	movs	r2, #33	; 0x21
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd fbbf 	bl	8001784 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004020:	d108      	bne.n	8004034 <HAL_UART_Transmit+0x80>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e003      	b.n	800403c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004044:	e02d      	b.n	80040a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fb04 	bl	800465e <UART_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e039      	b.n	80040d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004072:	b292      	uxth	r2, r2
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	3302      	adds	r3, #2
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	e008      	b.n	8004090 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b292      	uxth	r2, r2
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1cb      	bne.n	8004046 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2140      	movs	r1, #64	; 0x40
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fad0 	bl	800465e <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e005      	b.n	80040d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e000      	b.n	80040d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040d2:	2302      	movs	r3, #2
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4bab      	ldr	r3, [pc, #684]	; (80043b4 <UART_SetConfig+0x2d8>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	430b      	orrs	r3, r1
 8004112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a99      	ldr	r2, [pc, #612]	; (80043b8 <UART_SetConfig+0x2dc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d120      	bne.n	800419a <UART_SetConfig+0xbe>
 8004158:	4b98      	ldr	r3, [pc, #608]	; (80043bc <UART_SetConfig+0x2e0>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b03      	cmp	r3, #3
 8004162:	d817      	bhi.n	8004194 <UART_SetConfig+0xb8>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x90>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004189 	.word	0x08004189
 8004174:	0800418f 	.word	0x0800418f
 8004178:	08004183 	.word	0x08004183
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0b5      	b.n	80042ee <UART_SetConfig+0x212>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0b2      	b.n	80042ee <UART_SetConfig+0x212>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0af      	b.n	80042ee <UART_SetConfig+0x212>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e0ac      	b.n	80042ee <UART_SetConfig+0x212>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e0a9      	b.n	80042ee <UART_SetConfig+0x212>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a88      	ldr	r2, [pc, #544]	; (80043c0 <UART_SetConfig+0x2e4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d124      	bne.n	80041ee <UART_SetConfig+0x112>
 80041a4:	4b85      	ldr	r3, [pc, #532]	; (80043bc <UART_SetConfig+0x2e0>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b0:	d011      	beq.n	80041d6 <UART_SetConfig+0xfa>
 80041b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b6:	d817      	bhi.n	80041e8 <UART_SetConfig+0x10c>
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041bc:	d011      	beq.n	80041e2 <UART_SetConfig+0x106>
 80041be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c2:	d811      	bhi.n	80041e8 <UART_SetConfig+0x10c>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0xf4>
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d006      	beq.n	80041dc <UART_SetConfig+0x100>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x10c>
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e08b      	b.n	80042ee <UART_SetConfig+0x212>
 80041d6:	2302      	movs	r3, #2
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e088      	b.n	80042ee <UART_SetConfig+0x212>
 80041dc:	2304      	movs	r3, #4
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e085      	b.n	80042ee <UART_SetConfig+0x212>
 80041e2:	2308      	movs	r3, #8
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e082      	b.n	80042ee <UART_SetConfig+0x212>
 80041e8:	2310      	movs	r3, #16
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e07f      	b.n	80042ee <UART_SetConfig+0x212>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a74      	ldr	r2, [pc, #464]	; (80043c4 <UART_SetConfig+0x2e8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d124      	bne.n	8004242 <UART_SetConfig+0x166>
 80041f8:	4b70      	ldr	r3, [pc, #448]	; (80043bc <UART_SetConfig+0x2e0>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004204:	d011      	beq.n	800422a <UART_SetConfig+0x14e>
 8004206:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800420a:	d817      	bhi.n	800423c <UART_SetConfig+0x160>
 800420c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004210:	d011      	beq.n	8004236 <UART_SetConfig+0x15a>
 8004212:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004216:	d811      	bhi.n	800423c <UART_SetConfig+0x160>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <UART_SetConfig+0x148>
 800421c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004220:	d006      	beq.n	8004230 <UART_SetConfig+0x154>
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x160>
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e061      	b.n	80042ee <UART_SetConfig+0x212>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e05e      	b.n	80042ee <UART_SetConfig+0x212>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e05b      	b.n	80042ee <UART_SetConfig+0x212>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e058      	b.n	80042ee <UART_SetConfig+0x212>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e055      	b.n	80042ee <UART_SetConfig+0x212>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a60      	ldr	r2, [pc, #384]	; (80043c8 <UART_SetConfig+0x2ec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d124      	bne.n	8004296 <UART_SetConfig+0x1ba>
 800424c:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <UART_SetConfig+0x2e0>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004254:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004258:	d011      	beq.n	800427e <UART_SetConfig+0x1a2>
 800425a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425e:	d817      	bhi.n	8004290 <UART_SetConfig+0x1b4>
 8004260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004264:	d011      	beq.n	800428a <UART_SetConfig+0x1ae>
 8004266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426a:	d811      	bhi.n	8004290 <UART_SetConfig+0x1b4>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <UART_SetConfig+0x19c>
 8004270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004274:	d006      	beq.n	8004284 <UART_SetConfig+0x1a8>
 8004276:	e00b      	b.n	8004290 <UART_SetConfig+0x1b4>
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e037      	b.n	80042ee <UART_SetConfig+0x212>
 800427e:	2302      	movs	r3, #2
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e034      	b.n	80042ee <UART_SetConfig+0x212>
 8004284:	2304      	movs	r3, #4
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e031      	b.n	80042ee <UART_SetConfig+0x212>
 800428a:	2308      	movs	r3, #8
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e02e      	b.n	80042ee <UART_SetConfig+0x212>
 8004290:	2310      	movs	r3, #16
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e02b      	b.n	80042ee <UART_SetConfig+0x212>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a4c      	ldr	r2, [pc, #304]	; (80043cc <UART_SetConfig+0x2f0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d124      	bne.n	80042ea <UART_SetConfig+0x20e>
 80042a0:	4b46      	ldr	r3, [pc, #280]	; (80043bc <UART_SetConfig+0x2e0>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ac:	d011      	beq.n	80042d2 <UART_SetConfig+0x1f6>
 80042ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042b2:	d817      	bhi.n	80042e4 <UART_SetConfig+0x208>
 80042b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b8:	d011      	beq.n	80042de <UART_SetConfig+0x202>
 80042ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042be:	d811      	bhi.n	80042e4 <UART_SetConfig+0x208>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <UART_SetConfig+0x1f0>
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d006      	beq.n	80042d8 <UART_SetConfig+0x1fc>
 80042ca:	e00b      	b.n	80042e4 <UART_SetConfig+0x208>
 80042cc:	2300      	movs	r3, #0
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e00d      	b.n	80042ee <UART_SetConfig+0x212>
 80042d2:	2302      	movs	r3, #2
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e00a      	b.n	80042ee <UART_SetConfig+0x212>
 80042d8:	2304      	movs	r3, #4
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e007      	b.n	80042ee <UART_SetConfig+0x212>
 80042de:	2308      	movs	r3, #8
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e004      	b.n	80042ee <UART_SetConfig+0x212>
 80042e4:	2310      	movs	r3, #16
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e001      	b.n	80042ee <UART_SetConfig+0x212>
 80042ea:	2310      	movs	r3, #16
 80042ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f6:	d16d      	bne.n	80043d4 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80042f8:	7ffb      	ldrb	r3, [r7, #31]
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d827      	bhi.n	800434e <UART_SetConfig+0x272>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x228>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004329 	.word	0x08004329
 8004308:	08004331 	.word	0x08004331
 800430c:	08004339 	.word	0x08004339
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800433f 	.word	0x0800433f
 8004318:	0800434f 	.word	0x0800434f
 800431c:	0800434f 	.word	0x0800434f
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fe04 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 800432c:	61b8      	str	r0, [r7, #24]
        break;
 800432e:	e013      	b.n	8004358 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe fe22 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8004334:	61b8      	str	r0, [r7, #24]
        break;
 8004336:	e00f      	b.n	8004358 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <UART_SetConfig+0x2f4>)
 800433a:	61bb      	str	r3, [r7, #24]
        break;
 800433c:	e00c      	b.n	8004358 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433e:	f7fe fd83 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8004342:	61b8      	str	r0, [r7, #24]
        break;
 8004344:	e008      	b.n	8004358 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	61bb      	str	r3, [r7, #24]
        break;
 800434c:	e004      	b.n	8004358 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	77bb      	strb	r3, [r7, #30]
        break;
 8004356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8086 	beq.w	800446c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	005a      	lsls	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	b29b      	uxth	r3, r3
 8004376:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b0f      	cmp	r3, #15
 800437c:	d916      	bls.n	80043ac <UART_SetConfig+0x2d0>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004384:	d212      	bcs.n	80043ac <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f023 030f 	bic.w	r3, r3, #15
 800438e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	b29a      	uxth	r2, r3
 800439c:	89fb      	ldrh	r3, [r7, #14]
 800439e:	4313      	orrs	r3, r2
 80043a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	89fa      	ldrh	r2, [r7, #14]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e05f      	b.n	800446c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	77bb      	strb	r3, [r7, #30]
 80043b0:	e05c      	b.n	800446c <UART_SetConfig+0x390>
 80043b2:	bf00      	nop
 80043b4:	efff69f3 	.word	0xefff69f3
 80043b8:	40013800 	.word	0x40013800
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40004400 	.word	0x40004400
 80043c4:	40004800 	.word	0x40004800
 80043c8:	40004c00 	.word	0x40004c00
 80043cc:	40005000 	.word	0x40005000
 80043d0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d827      	bhi.n	800442a <UART_SetConfig+0x34e>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x304>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800442b 	.word	0x0800442b
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fd96 	bl	8002f34 <HAL_RCC_GetPCLK1Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e013      	b.n	8004434 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7fe fdb4 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <UART_SetConfig+0x3a8>)
 8004416:	61bb      	str	r3, [r7, #24]
        break;
 8004418:	e00c      	b.n	8004434 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fe fd15 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 800441e:	61b8      	str	r0, [r7, #24]
        break;
 8004420:	e008      	b.n	8004434 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e004      	b.n	8004434 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	77bb      	strb	r3, [r7, #30]
        break;
 8004432:	bf00      	nop
    }

    if (pclk != 0U)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	085a      	lsrs	r2, r3, #1
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	441a      	add	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	b29b      	uxth	r3, r3
 800444e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	d908      	bls.n	8004468 <UART_SetConfig+0x38c>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d204      	bcs.n	8004468 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e001      	b.n	800446c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004478:	7fbb      	ldrb	r3, [r7, #30]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	007a1200 	.word	0x007a1200

08004488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01a      	beq.n	800459e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004586:	d10a      	bne.n	800459e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045dc:	f7fd f8d2 	bl	8001784 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d10e      	bne.n	800460e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f82d 	bl	800465e <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e023      	b.n	8004656 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b04      	cmp	r3, #4
 800461a:	d10e      	bne.n	800463a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800461c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f817 	bl	800465e <UART_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e00d      	b.n	8004656 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b09c      	sub	sp, #112	; 0x70
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	603b      	str	r3, [r7, #0]
 800466a:	4613      	mov	r3, r2
 800466c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466e:	e0a5      	b.n	80047bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	f000 80a1 	beq.w	80047bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fd f883 	bl	8001784 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <UART_WaitOnFlagUntilTimeout+0x32>
 800468a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468c:	2b00      	cmp	r3, #0
 800468e:	d13e      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046a4:	667b      	str	r3, [r7, #100]	; 0x64
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e6      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	663b      	str	r3, [r7, #96]	; 0x60
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e067      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d04f      	beq.n	80047bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	d147      	bne.n	80047bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004734:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800474a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
 8004756:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800475a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	613b      	str	r3, [r7, #16]
   return(result);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004788:	623a      	str	r2, [r7, #32]
 800478a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69f9      	ldr	r1, [r7, #28]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	61bb      	str	r3, [r7, #24]
   return(result);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e010      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	f43f af4a 	beq.w	8004670 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3770      	adds	r7, #112	; 0x70
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <__errno>:
 80047e8:	4b01      	ldr	r3, [pc, #4]	; (80047f0 <__errno+0x8>)
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <__libc_init_array>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4d0d      	ldr	r5, [pc, #52]	; (800482c <__libc_init_array+0x38>)
 80047f8:	4c0d      	ldr	r4, [pc, #52]	; (8004830 <__libc_init_array+0x3c>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	2600      	movs	r6, #0
 8004800:	42a6      	cmp	r6, r4
 8004802:	d109      	bne.n	8004818 <__libc_init_array+0x24>
 8004804:	4d0b      	ldr	r5, [pc, #44]	; (8004834 <__libc_init_array+0x40>)
 8004806:	4c0c      	ldr	r4, [pc, #48]	; (8004838 <__libc_init_array+0x44>)
 8004808:	f000 fc5e 	bl	80050c8 <_init>
 800480c:	1b64      	subs	r4, r4, r5
 800480e:	10a4      	asrs	r4, r4, #2
 8004810:	2600      	movs	r6, #0
 8004812:	42a6      	cmp	r6, r4
 8004814:	d105      	bne.n	8004822 <__libc_init_array+0x2e>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	f855 3b04 	ldr.w	r3, [r5], #4
 800481c:	4798      	blx	r3
 800481e:	3601      	adds	r6, #1
 8004820:	e7ee      	b.n	8004800 <__libc_init_array+0xc>
 8004822:	f855 3b04 	ldr.w	r3, [r5], #4
 8004826:	4798      	blx	r3
 8004828:	3601      	adds	r6, #1
 800482a:	e7f2      	b.n	8004812 <__libc_init_array+0x1e>
 800482c:	08005284 	.word	0x08005284
 8004830:	08005284 	.word	0x08005284
 8004834:	08005284 	.word	0x08005284
 8004838:	08005288 	.word	0x08005288

0800483c <malloc>:
 800483c:	4b02      	ldr	r3, [pc, #8]	; (8004848 <malloc+0xc>)
 800483e:	4601      	mov	r1, r0
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f000 b871 	b.w	8004928 <_malloc_r>
 8004846:	bf00      	nop
 8004848:	2000000c 	.word	0x2000000c

0800484c <free>:
 800484c:	4b02      	ldr	r3, [pc, #8]	; (8004858 <free+0xc>)
 800484e:	4601      	mov	r1, r0
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f000 b819 	b.w	8004888 <_free_r>
 8004856:	bf00      	nop
 8004858:	2000000c 	.word	0x2000000c

0800485c <memcpy>:
 800485c:	440a      	add	r2, r1
 800485e:	4291      	cmp	r1, r2
 8004860:	f100 33ff 	add.w	r3, r0, #4294967295
 8004864:	d100      	bne.n	8004868 <memcpy+0xc>
 8004866:	4770      	bx	lr
 8004868:	b510      	push	{r4, lr}
 800486a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800486e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004872:	4291      	cmp	r1, r2
 8004874:	d1f9      	bne.n	800486a <memcpy+0xe>
 8004876:	bd10      	pop	{r4, pc}

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <_free_r>:
 8004888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488a:	2900      	cmp	r1, #0
 800488c:	d048      	beq.n	8004920 <_free_r+0x98>
 800488e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004892:	9001      	str	r0, [sp, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f1a1 0404 	sub.w	r4, r1, #4
 800489a:	bfb8      	it	lt
 800489c:	18e4      	addlt	r4, r4, r3
 800489e:	f000 f8cd 	bl	8004a3c <__malloc_lock>
 80048a2:	4a20      	ldr	r2, [pc, #128]	; (8004924 <_free_r+0x9c>)
 80048a4:	9801      	ldr	r0, [sp, #4]
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	4615      	mov	r5, r2
 80048aa:	b933      	cbnz	r3, 80048ba <_free_r+0x32>
 80048ac:	6063      	str	r3, [r4, #4]
 80048ae:	6014      	str	r4, [r2, #0]
 80048b0:	b003      	add	sp, #12
 80048b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b6:	f000 b8c7 	b.w	8004a48 <__malloc_unlock>
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	d90b      	bls.n	80048d6 <_free_r+0x4e>
 80048be:	6821      	ldr	r1, [r4, #0]
 80048c0:	1862      	adds	r2, r4, r1
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bf04      	itt	eq
 80048c6:	681a      	ldreq	r2, [r3, #0]
 80048c8:	685b      	ldreq	r3, [r3, #4]
 80048ca:	6063      	str	r3, [r4, #4]
 80048cc:	bf04      	itt	eq
 80048ce:	1852      	addeq	r2, r2, r1
 80048d0:	6022      	streq	r2, [r4, #0]
 80048d2:	602c      	str	r4, [r5, #0]
 80048d4:	e7ec      	b.n	80048b0 <_free_r+0x28>
 80048d6:	461a      	mov	r2, r3
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b10b      	cbz	r3, 80048e0 <_free_r+0x58>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d9fa      	bls.n	80048d6 <_free_r+0x4e>
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	1855      	adds	r5, r2, r1
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d10b      	bne.n	8004900 <_free_r+0x78>
 80048e8:	6824      	ldr	r4, [r4, #0]
 80048ea:	4421      	add	r1, r4
 80048ec:	1854      	adds	r4, r2, r1
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	d1dd      	bne.n	80048b0 <_free_r+0x28>
 80048f4:	681c      	ldr	r4, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	4421      	add	r1, r4
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	e7d7      	b.n	80048b0 <_free_r+0x28>
 8004900:	d902      	bls.n	8004908 <_free_r+0x80>
 8004902:	230c      	movs	r3, #12
 8004904:	6003      	str	r3, [r0, #0]
 8004906:	e7d3      	b.n	80048b0 <_free_r+0x28>
 8004908:	6825      	ldr	r5, [r4, #0]
 800490a:	1961      	adds	r1, r4, r5
 800490c:	428b      	cmp	r3, r1
 800490e:	bf04      	itt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	bf04      	itt	eq
 8004918:	1949      	addeq	r1, r1, r5
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	6054      	str	r4, [r2, #4]
 800491e:	e7c7      	b.n	80048b0 <_free_r+0x28>
 8004920:	b003      	add	sp, #12
 8004922:	bd30      	pop	{r4, r5, pc}
 8004924:	2000011c 	.word	0x2000011c

08004928 <_malloc_r>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	1ccd      	adds	r5, r1, #3
 800492c:	f025 0503 	bic.w	r5, r5, #3
 8004930:	3508      	adds	r5, #8
 8004932:	2d0c      	cmp	r5, #12
 8004934:	bf38      	it	cc
 8004936:	250c      	movcc	r5, #12
 8004938:	2d00      	cmp	r5, #0
 800493a:	4606      	mov	r6, r0
 800493c:	db01      	blt.n	8004942 <_malloc_r+0x1a>
 800493e:	42a9      	cmp	r1, r5
 8004940:	d903      	bls.n	800494a <_malloc_r+0x22>
 8004942:	230c      	movs	r3, #12
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	2000      	movs	r0, #0
 8004948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800494a:	f000 f877 	bl	8004a3c <__malloc_lock>
 800494e:	4921      	ldr	r1, [pc, #132]	; (80049d4 <_malloc_r+0xac>)
 8004950:	680a      	ldr	r2, [r1, #0]
 8004952:	4614      	mov	r4, r2
 8004954:	b99c      	cbnz	r4, 800497e <_malloc_r+0x56>
 8004956:	4f20      	ldr	r7, [pc, #128]	; (80049d8 <_malloc_r+0xb0>)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	b923      	cbnz	r3, 8004966 <_malloc_r+0x3e>
 800495c:	4621      	mov	r1, r4
 800495e:	4630      	mov	r0, r6
 8004960:	f000 f83c 	bl	80049dc <_sbrk_r>
 8004964:	6038      	str	r0, [r7, #0]
 8004966:	4629      	mov	r1, r5
 8004968:	4630      	mov	r0, r6
 800496a:	f000 f837 	bl	80049dc <_sbrk_r>
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	d123      	bne.n	80049ba <_malloc_r+0x92>
 8004972:	230c      	movs	r3, #12
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	4630      	mov	r0, r6
 8004978:	f000 f866 	bl	8004a48 <__malloc_unlock>
 800497c:	e7e3      	b.n	8004946 <_malloc_r+0x1e>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	1b5b      	subs	r3, r3, r5
 8004982:	d417      	bmi.n	80049b4 <_malloc_r+0x8c>
 8004984:	2b0b      	cmp	r3, #11
 8004986:	d903      	bls.n	8004990 <_malloc_r+0x68>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	441c      	add	r4, r3
 800498c:	6025      	str	r5, [r4, #0]
 800498e:	e004      	b.n	800499a <_malloc_r+0x72>
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	42a2      	cmp	r2, r4
 8004994:	bf0c      	ite	eq
 8004996:	600b      	streq	r3, [r1, #0]
 8004998:	6053      	strne	r3, [r2, #4]
 800499a:	4630      	mov	r0, r6
 800499c:	f000 f854 	bl	8004a48 <__malloc_unlock>
 80049a0:	f104 000b 	add.w	r0, r4, #11
 80049a4:	1d23      	adds	r3, r4, #4
 80049a6:	f020 0007 	bic.w	r0, r0, #7
 80049aa:	1ac2      	subs	r2, r0, r3
 80049ac:	d0cc      	beq.n	8004948 <_malloc_r+0x20>
 80049ae:	1a1b      	subs	r3, r3, r0
 80049b0:	50a3      	str	r3, [r4, r2]
 80049b2:	e7c9      	b.n	8004948 <_malloc_r+0x20>
 80049b4:	4622      	mov	r2, r4
 80049b6:	6864      	ldr	r4, [r4, #4]
 80049b8:	e7cc      	b.n	8004954 <_malloc_r+0x2c>
 80049ba:	1cc4      	adds	r4, r0, #3
 80049bc:	f024 0403 	bic.w	r4, r4, #3
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	d0e3      	beq.n	800498c <_malloc_r+0x64>
 80049c4:	1a21      	subs	r1, r4, r0
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 f808 	bl	80049dc <_sbrk_r>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d1dd      	bne.n	800498c <_malloc_r+0x64>
 80049d0:	e7cf      	b.n	8004972 <_malloc_r+0x4a>
 80049d2:	bf00      	nop
 80049d4:	2000011c 	.word	0x2000011c
 80049d8:	20000120 	.word	0x20000120

080049dc <_sbrk_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d06      	ldr	r5, [pc, #24]	; (80049f8 <_sbrk_r+0x1c>)
 80049e0:	2300      	movs	r3, #0
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	f7fc fe00 	bl	80015ec <_sbrk>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_sbrk_r+0x1a>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_sbrk_r+0x1a>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000210 	.word	0x20000210

080049fc <siprintf>:
 80049fc:	b40e      	push	{r1, r2, r3}
 80049fe:	b500      	push	{lr}
 8004a00:	b09c      	sub	sp, #112	; 0x70
 8004a02:	ab1d      	add	r3, sp, #116	; 0x74
 8004a04:	9002      	str	r0, [sp, #8]
 8004a06:	9006      	str	r0, [sp, #24]
 8004a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a0c:	4809      	ldr	r0, [pc, #36]	; (8004a34 <siprintf+0x38>)
 8004a0e:	9107      	str	r1, [sp, #28]
 8004a10:	9104      	str	r1, [sp, #16]
 8004a12:	4909      	ldr	r1, [pc, #36]	; (8004a38 <siprintf+0x3c>)
 8004a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a18:	9105      	str	r1, [sp, #20]
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	a902      	add	r1, sp, #8
 8004a20:	f000 f874 	bl	8004b0c <_svfiprintf_r>
 8004a24:	9b02      	ldr	r3, [sp, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	b01c      	add	sp, #112	; 0x70
 8004a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a30:	b003      	add	sp, #12
 8004a32:	4770      	bx	lr
 8004a34:	2000000c 	.word	0x2000000c
 8004a38:	ffff0208 	.word	0xffff0208

08004a3c <__malloc_lock>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	; (8004a44 <__malloc_lock+0x8>)
 8004a3e:	f000 baf9 	b.w	8005034 <__retarget_lock_acquire_recursive>
 8004a42:	bf00      	nop
 8004a44:	20000218 	.word	0x20000218

08004a48 <__malloc_unlock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__malloc_unlock+0x8>)
 8004a4a:	f000 baf4 	b.w	8005036 <__retarget_lock_release_recursive>
 8004a4e:	bf00      	nop
 8004a50:	20000218 	.word	0x20000218

08004a54 <__ssputs_r>:
 8004a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	688e      	ldr	r6, [r1, #8]
 8004a5a:	429e      	cmp	r6, r3
 8004a5c:	4682      	mov	sl, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	4690      	mov	r8, r2
 8004a62:	461f      	mov	r7, r3
 8004a64:	d838      	bhi.n	8004ad8 <__ssputs_r+0x84>
 8004a66:	898a      	ldrh	r2, [r1, #12]
 8004a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a6c:	d032      	beq.n	8004ad4 <__ssputs_r+0x80>
 8004a6e:	6825      	ldr	r5, [r4, #0]
 8004a70:	6909      	ldr	r1, [r1, #16]
 8004a72:	eba5 0901 	sub.w	r9, r5, r1
 8004a76:	6965      	ldr	r5, [r4, #20]
 8004a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a80:	3301      	adds	r3, #1
 8004a82:	444b      	add	r3, r9
 8004a84:	106d      	asrs	r5, r5, #1
 8004a86:	429d      	cmp	r5, r3
 8004a88:	bf38      	it	cc
 8004a8a:	461d      	movcc	r5, r3
 8004a8c:	0553      	lsls	r3, r2, #21
 8004a8e:	d531      	bpl.n	8004af4 <__ssputs_r+0xa0>
 8004a90:	4629      	mov	r1, r5
 8004a92:	f7ff ff49 	bl	8004928 <_malloc_r>
 8004a96:	4606      	mov	r6, r0
 8004a98:	b950      	cbnz	r0, 8004ab0 <__ssputs_r+0x5c>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	f8ca 3000 	str.w	r3, [sl]
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	6921      	ldr	r1, [r4, #16]
 8004ab2:	464a      	mov	r2, r9
 8004ab4:	f7ff fed2 	bl	800485c <memcpy>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	6126      	str	r6, [r4, #16]
 8004ac6:	6165      	str	r5, [r4, #20]
 8004ac8:	444e      	add	r6, r9
 8004aca:	eba5 0509 	sub.w	r5, r5, r9
 8004ace:	6026      	str	r6, [r4, #0]
 8004ad0:	60a5      	str	r5, [r4, #8]
 8004ad2:	463e      	mov	r6, r7
 8004ad4:	42be      	cmp	r6, r7
 8004ad6:	d900      	bls.n	8004ada <__ssputs_r+0x86>
 8004ad8:	463e      	mov	r6, r7
 8004ada:	4632      	mov	r2, r6
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	4641      	mov	r1, r8
 8004ae0:	f000 faaa 	bl	8005038 <memmove>
 8004ae4:	68a3      	ldr	r3, [r4, #8]
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	1b9b      	subs	r3, r3, r6
 8004aea:	4432      	add	r2, r6
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	6022      	str	r2, [r4, #0]
 8004af0:	2000      	movs	r0, #0
 8004af2:	e7db      	b.n	8004aac <__ssputs_r+0x58>
 8004af4:	462a      	mov	r2, r5
 8004af6:	f000 fab9 	bl	800506c <_realloc_r>
 8004afa:	4606      	mov	r6, r0
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d1e1      	bne.n	8004ac4 <__ssputs_r+0x70>
 8004b00:	6921      	ldr	r1, [r4, #16]
 8004b02:	4650      	mov	r0, sl
 8004b04:	f7ff fec0 	bl	8004888 <_free_r>
 8004b08:	e7c7      	b.n	8004a9a <__ssputs_r+0x46>
	...

08004b0c <_svfiprintf_r>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	4698      	mov	r8, r3
 8004b12:	898b      	ldrh	r3, [r1, #12]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	b09d      	sub	sp, #116	; 0x74
 8004b18:	4607      	mov	r7, r0
 8004b1a:	460d      	mov	r5, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	d50e      	bpl.n	8004b3e <_svfiprintf_r+0x32>
 8004b20:	690b      	ldr	r3, [r1, #16]
 8004b22:	b963      	cbnz	r3, 8004b3e <_svfiprintf_r+0x32>
 8004b24:	2140      	movs	r1, #64	; 0x40
 8004b26:	f7ff feff 	bl	8004928 <_malloc_r>
 8004b2a:	6028      	str	r0, [r5, #0]
 8004b2c:	6128      	str	r0, [r5, #16]
 8004b2e:	b920      	cbnz	r0, 8004b3a <_svfiprintf_r+0x2e>
 8004b30:	230c      	movs	r3, #12
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e0d1      	b.n	8004cde <_svfiprintf_r+0x1d2>
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	616b      	str	r3, [r5, #20]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9309      	str	r3, [sp, #36]	; 0x24
 8004b42:	2320      	movs	r3, #32
 8004b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4c:	2330      	movs	r3, #48	; 0x30
 8004b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004cf8 <_svfiprintf_r+0x1ec>
 8004b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b56:	f04f 0901 	mov.w	r9, #1
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	469a      	mov	sl, r3
 8004b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b62:	b10a      	cbz	r2, 8004b68 <_svfiprintf_r+0x5c>
 8004b64:	2a25      	cmp	r2, #37	; 0x25
 8004b66:	d1f9      	bne.n	8004b5c <_svfiprintf_r+0x50>
 8004b68:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6c:	d00b      	beq.n	8004b86 <_svfiprintf_r+0x7a>
 8004b6e:	465b      	mov	r3, fp
 8004b70:	4622      	mov	r2, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7ff ff6d 	bl	8004a54 <__ssputs_r>
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	f000 80aa 	beq.w	8004cd4 <_svfiprintf_r+0x1c8>
 8004b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b82:	445a      	add	r2, fp
 8004b84:	9209      	str	r2, [sp, #36]	; 0x24
 8004b86:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80a2 	beq.w	8004cd4 <_svfiprintf_r+0x1c8>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f04f 32ff 	mov.w	r2, #4294967295
 8004b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b9a:	f10a 0a01 	add.w	sl, sl, #1
 8004b9e:	9304      	str	r3, [sp, #16]
 8004ba0:	9307      	str	r3, [sp, #28]
 8004ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba8:	4654      	mov	r4, sl
 8004baa:	2205      	movs	r2, #5
 8004bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb0:	4851      	ldr	r0, [pc, #324]	; (8004cf8 <_svfiprintf_r+0x1ec>)
 8004bb2:	f7fb fb1d 	bl	80001f0 <memchr>
 8004bb6:	9a04      	ldr	r2, [sp, #16]
 8004bb8:	b9d8      	cbnz	r0, 8004bf2 <_svfiprintf_r+0xe6>
 8004bba:	06d0      	lsls	r0, r2, #27
 8004bbc:	bf44      	itt	mi
 8004bbe:	2320      	movmi	r3, #32
 8004bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc4:	0711      	lsls	r1, r2, #28
 8004bc6:	bf44      	itt	mi
 8004bc8:	232b      	movmi	r3, #43	; 0x2b
 8004bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bce:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd4:	d015      	beq.n	8004c02 <_svfiprintf_r+0xf6>
 8004bd6:	9a07      	ldr	r2, [sp, #28]
 8004bd8:	4654      	mov	r4, sl
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f04f 0c0a 	mov.w	ip, #10
 8004be0:	4621      	mov	r1, r4
 8004be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be6:	3b30      	subs	r3, #48	; 0x30
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d94e      	bls.n	8004c8a <_svfiprintf_r+0x17e>
 8004bec:	b1b0      	cbz	r0, 8004c1c <_svfiprintf_r+0x110>
 8004bee:	9207      	str	r2, [sp, #28]
 8004bf0:	e014      	b.n	8004c1c <_svfiprintf_r+0x110>
 8004bf2:	eba0 0308 	sub.w	r3, r0, r8
 8004bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	46a2      	mov	sl, r4
 8004c00:	e7d2      	b.n	8004ba8 <_svfiprintf_r+0x9c>
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	1d19      	adds	r1, r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	9103      	str	r1, [sp, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfbb      	ittet	lt
 8004c0e:	425b      	neglt	r3, r3
 8004c10:	f042 0202 	orrlt.w	r2, r2, #2
 8004c14:	9307      	strge	r3, [sp, #28]
 8004c16:	9307      	strlt	r3, [sp, #28]
 8004c18:	bfb8      	it	lt
 8004c1a:	9204      	strlt	r2, [sp, #16]
 8004c1c:	7823      	ldrb	r3, [r4, #0]
 8004c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c20:	d10c      	bne.n	8004c3c <_svfiprintf_r+0x130>
 8004c22:	7863      	ldrb	r3, [r4, #1]
 8004c24:	2b2a      	cmp	r3, #42	; 0x2a
 8004c26:	d135      	bne.n	8004c94 <_svfiprintf_r+0x188>
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	9203      	str	r2, [sp, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bfb8      	it	lt
 8004c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c38:	3402      	adds	r4, #2
 8004c3a:	9305      	str	r3, [sp, #20]
 8004c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d08 <_svfiprintf_r+0x1fc>
 8004c40:	7821      	ldrb	r1, [r4, #0]
 8004c42:	2203      	movs	r2, #3
 8004c44:	4650      	mov	r0, sl
 8004c46:	f7fb fad3 	bl	80001f0 <memchr>
 8004c4a:	b140      	cbz	r0, 8004c5e <_svfiprintf_r+0x152>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	eba0 000a 	sub.w	r0, r0, sl
 8004c52:	fa03 f000 	lsl.w	r0, r3, r0
 8004c56:	9b04      	ldr	r3, [sp, #16]
 8004c58:	4303      	orrs	r3, r0
 8004c5a:	3401      	adds	r4, #1
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c62:	4826      	ldr	r0, [pc, #152]	; (8004cfc <_svfiprintf_r+0x1f0>)
 8004c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c68:	2206      	movs	r2, #6
 8004c6a:	f7fb fac1 	bl	80001f0 <memchr>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d038      	beq.n	8004ce4 <_svfiprintf_r+0x1d8>
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <_svfiprintf_r+0x1f4>)
 8004c74:	bb1b      	cbnz	r3, 8004cbe <_svfiprintf_r+0x1b2>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	3307      	adds	r3, #7
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	3308      	adds	r3, #8
 8004c80:	9303      	str	r3, [sp, #12]
 8004c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c84:	4433      	add	r3, r6
 8004c86:	9309      	str	r3, [sp, #36]	; 0x24
 8004c88:	e767      	b.n	8004b5a <_svfiprintf_r+0x4e>
 8004c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8e:	460c      	mov	r4, r1
 8004c90:	2001      	movs	r0, #1
 8004c92:	e7a5      	b.n	8004be0 <_svfiprintf_r+0xd4>
 8004c94:	2300      	movs	r3, #0
 8004c96:	3401      	adds	r4, #1
 8004c98:	9305      	str	r3, [sp, #20]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f04f 0c0a 	mov.w	ip, #10
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca6:	3a30      	subs	r2, #48	; 0x30
 8004ca8:	2a09      	cmp	r2, #9
 8004caa:	d903      	bls.n	8004cb4 <_svfiprintf_r+0x1a8>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0c5      	beq.n	8004c3c <_svfiprintf_r+0x130>
 8004cb0:	9105      	str	r1, [sp, #20]
 8004cb2:	e7c3      	b.n	8004c3c <_svfiprintf_r+0x130>
 8004cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb8:	4604      	mov	r4, r0
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e7f0      	b.n	8004ca0 <_svfiprintf_r+0x194>
 8004cbe:	ab03      	add	r3, sp, #12
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	462a      	mov	r2, r5
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <_svfiprintf_r+0x1f8>)
 8004cc6:	a904      	add	r1, sp, #16
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f3af 8000 	nop.w
 8004cce:	1c42      	adds	r2, r0, #1
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	d1d6      	bne.n	8004c82 <_svfiprintf_r+0x176>
 8004cd4:	89ab      	ldrh	r3, [r5, #12]
 8004cd6:	065b      	lsls	r3, r3, #25
 8004cd8:	f53f af2c 	bmi.w	8004b34 <_svfiprintf_r+0x28>
 8004cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cde:	b01d      	add	sp, #116	; 0x74
 8004ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce4:	ab03      	add	r3, sp, #12
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	462a      	mov	r2, r5
 8004cea:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <_svfiprintf_r+0x1f8>)
 8004cec:	a904      	add	r1, sp, #16
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f000 f87a 	bl	8004de8 <_printf_i>
 8004cf4:	e7eb      	b.n	8004cce <_svfiprintf_r+0x1c2>
 8004cf6:	bf00      	nop
 8004cf8:	08005250 	.word	0x08005250
 8004cfc:	0800525a 	.word	0x0800525a
 8004d00:	00000000 	.word	0x00000000
 8004d04:	08004a55 	.word	0x08004a55
 8004d08:	08005256 	.word	0x08005256

08004d0c <_printf_common>:
 8004d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	4616      	mov	r6, r2
 8004d12:	4699      	mov	r9, r3
 8004d14:	688a      	ldr	r2, [r1, #8]
 8004d16:	690b      	ldr	r3, [r1, #16]
 8004d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bfb8      	it	lt
 8004d20:	4613      	movlt	r3, r2
 8004d22:	6033      	str	r3, [r6, #0]
 8004d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d28:	4607      	mov	r7, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	b10a      	cbz	r2, 8004d32 <_printf_common+0x26>
 8004d2e:	3301      	adds	r3, #1
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	0699      	lsls	r1, r3, #26
 8004d36:	bf42      	ittt	mi
 8004d38:	6833      	ldrmi	r3, [r6, #0]
 8004d3a:	3302      	addmi	r3, #2
 8004d3c:	6033      	strmi	r3, [r6, #0]
 8004d3e:	6825      	ldr	r5, [r4, #0]
 8004d40:	f015 0506 	ands.w	r5, r5, #6
 8004d44:	d106      	bne.n	8004d54 <_printf_common+0x48>
 8004d46:	f104 0a19 	add.w	sl, r4, #25
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	6832      	ldr	r2, [r6, #0]
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dc26      	bgt.n	8004da2 <_printf_common+0x96>
 8004d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d58:	1e13      	subs	r3, r2, #0
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	bf18      	it	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	0692      	lsls	r2, r2, #26
 8004d62:	d42b      	bmi.n	8004dbc <_printf_common+0xb0>
 8004d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d01e      	beq.n	8004db0 <_printf_common+0xa4>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	68e5      	ldr	r5, [r4, #12]
 8004d76:	6832      	ldr	r2, [r6, #0]
 8004d78:	f003 0306 	and.w	r3, r3, #6
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	bf08      	it	eq
 8004d80:	1aad      	subeq	r5, r5, r2
 8004d82:	68a3      	ldr	r3, [r4, #8]
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	bf0c      	ite	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	2500      	movne	r5, #0
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	bfc4      	itt	gt
 8004d92:	1a9b      	subgt	r3, r3, r2
 8004d94:	18ed      	addgt	r5, r5, r3
 8004d96:	2600      	movs	r6, #0
 8004d98:	341a      	adds	r4, #26
 8004d9a:	42b5      	cmp	r5, r6
 8004d9c:	d11a      	bne.n	8004dd4 <_printf_common+0xc8>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e008      	b.n	8004db4 <_printf_common+0xa8>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4652      	mov	r2, sl
 8004da6:	4649      	mov	r1, r9
 8004da8:	4638      	mov	r0, r7
 8004daa:	47c0      	blx	r8
 8004dac:	3001      	adds	r0, #1
 8004dae:	d103      	bne.n	8004db8 <_printf_common+0xac>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	3501      	adds	r5, #1
 8004dba:	e7c6      	b.n	8004d4a <_printf_common+0x3e>
 8004dbc:	18e1      	adds	r1, r4, r3
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	2030      	movs	r0, #48	; 0x30
 8004dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc6:	4422      	add	r2, r4
 8004dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	e7c7      	b.n	8004d64 <_printf_common+0x58>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d0e6      	beq.n	8004db0 <_printf_common+0xa4>
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7d9      	b.n	8004d9a <_printf_common+0x8e>
	...

08004de8 <_printf_i>:
 8004de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	460c      	mov	r4, r1
 8004dee:	4691      	mov	r9, r2
 8004df0:	7e27      	ldrb	r7, [r4, #24]
 8004df2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004df4:	2f78      	cmp	r7, #120	; 0x78
 8004df6:	4680      	mov	r8, r0
 8004df8:	469a      	mov	sl, r3
 8004dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dfe:	d807      	bhi.n	8004e10 <_printf_i+0x28>
 8004e00:	2f62      	cmp	r7, #98	; 0x62
 8004e02:	d80a      	bhi.n	8004e1a <_printf_i+0x32>
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	f000 80d8 	beq.w	8004fba <_printf_i+0x1d2>
 8004e0a:	2f58      	cmp	r7, #88	; 0x58
 8004e0c:	f000 80a3 	beq.w	8004f56 <_printf_i+0x16e>
 8004e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e18:	e03a      	b.n	8004e90 <_printf_i+0xa8>
 8004e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e1e:	2b15      	cmp	r3, #21
 8004e20:	d8f6      	bhi.n	8004e10 <_printf_i+0x28>
 8004e22:	a001      	add	r0, pc, #4	; (adr r0, 8004e28 <_printf_i+0x40>)
 8004e24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e95 	.word	0x08004e95
 8004e30:	08004e11 	.word	0x08004e11
 8004e34:	08004e11 	.word	0x08004e11
 8004e38:	08004e11 	.word	0x08004e11
 8004e3c:	08004e11 	.word	0x08004e11
 8004e40:	08004e95 	.word	0x08004e95
 8004e44:	08004e11 	.word	0x08004e11
 8004e48:	08004e11 	.word	0x08004e11
 8004e4c:	08004e11 	.word	0x08004e11
 8004e50:	08004e11 	.word	0x08004e11
 8004e54:	08004fa1 	.word	0x08004fa1
 8004e58:	08004ec5 	.word	0x08004ec5
 8004e5c:	08004f83 	.word	0x08004f83
 8004e60:	08004e11 	.word	0x08004e11
 8004e64:	08004e11 	.word	0x08004e11
 8004e68:	08004fc3 	.word	0x08004fc3
 8004e6c:	08004e11 	.word	0x08004e11
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e11 	.word	0x08004e11
 8004e78:	08004e11 	.word	0x08004e11
 8004e7c:	08004f8b 	.word	0x08004f8b
 8004e80:	680b      	ldr	r3, [r1, #0]
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	600a      	str	r2, [r1, #0]
 8004e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0a3      	b.n	8004fdc <_printf_i+0x1f4>
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	6808      	ldr	r0, [r1, #0]
 8004e98:	062e      	lsls	r6, r5, #24
 8004e9a:	f100 0304 	add.w	r3, r0, #4
 8004e9e:	d50a      	bpl.n	8004eb6 <_printf_i+0xce>
 8004ea0:	6805      	ldr	r5, [r0, #0]
 8004ea2:	600b      	str	r3, [r1, #0]
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	da03      	bge.n	8004eb0 <_printf_i+0xc8>
 8004ea8:	232d      	movs	r3, #45	; 0x2d
 8004eaa:	426d      	negs	r5, r5
 8004eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb0:	485e      	ldr	r0, [pc, #376]	; (800502c <_printf_i+0x244>)
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	e019      	b.n	8004eea <_printf_i+0x102>
 8004eb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eba:	6805      	ldr	r5, [r0, #0]
 8004ebc:	600b      	str	r3, [r1, #0]
 8004ebe:	bf18      	it	ne
 8004ec0:	b22d      	sxthne	r5, r5
 8004ec2:	e7ef      	b.n	8004ea4 <_printf_i+0xbc>
 8004ec4:	680b      	ldr	r3, [r1, #0]
 8004ec6:	6825      	ldr	r5, [r4, #0]
 8004ec8:	1d18      	adds	r0, r3, #4
 8004eca:	6008      	str	r0, [r1, #0]
 8004ecc:	0628      	lsls	r0, r5, #24
 8004ece:	d501      	bpl.n	8004ed4 <_printf_i+0xec>
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <_printf_i+0xf2>
 8004ed4:	0669      	lsls	r1, r5, #25
 8004ed6:	d5fb      	bpl.n	8004ed0 <_printf_i+0xe8>
 8004ed8:	881d      	ldrh	r5, [r3, #0]
 8004eda:	4854      	ldr	r0, [pc, #336]	; (800502c <_printf_i+0x244>)
 8004edc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ede:	bf0c      	ite	eq
 8004ee0:	2308      	moveq	r3, #8
 8004ee2:	230a      	movne	r3, #10
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eea:	6866      	ldr	r6, [r4, #4]
 8004eec:	60a6      	str	r6, [r4, #8]
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	bfa2      	ittt	ge
 8004ef2:	6821      	ldrge	r1, [r4, #0]
 8004ef4:	f021 0104 	bicge.w	r1, r1, #4
 8004ef8:	6021      	strge	r1, [r4, #0]
 8004efa:	b90d      	cbnz	r5, 8004f00 <_printf_i+0x118>
 8004efc:	2e00      	cmp	r6, #0
 8004efe:	d04d      	beq.n	8004f9c <_printf_i+0x1b4>
 8004f00:	4616      	mov	r6, r2
 8004f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f06:	fb03 5711 	mls	r7, r3, r1, r5
 8004f0a:	5dc7      	ldrb	r7, [r0, r7]
 8004f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f10:	462f      	mov	r7, r5
 8004f12:	42bb      	cmp	r3, r7
 8004f14:	460d      	mov	r5, r1
 8004f16:	d9f4      	bls.n	8004f02 <_printf_i+0x11a>
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d10b      	bne.n	8004f34 <_printf_i+0x14c>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	07df      	lsls	r7, r3, #31
 8004f20:	d508      	bpl.n	8004f34 <_printf_i+0x14c>
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	6861      	ldr	r1, [r4, #4]
 8004f26:	4299      	cmp	r1, r3
 8004f28:	bfde      	ittt	le
 8004f2a:	2330      	movle	r3, #48	; 0x30
 8004f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f34:	1b92      	subs	r2, r2, r6
 8004f36:	6122      	str	r2, [r4, #16]
 8004f38:	f8cd a000 	str.w	sl, [sp]
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	aa03      	add	r2, sp, #12
 8004f40:	4621      	mov	r1, r4
 8004f42:	4640      	mov	r0, r8
 8004f44:	f7ff fee2 	bl	8004d0c <_printf_common>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d14c      	bne.n	8004fe6 <_printf_i+0x1fe>
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	b004      	add	sp, #16
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f56:	4835      	ldr	r0, [pc, #212]	; (800502c <_printf_i+0x244>)
 8004f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	680e      	ldr	r6, [r1, #0]
 8004f60:	061f      	lsls	r7, r3, #24
 8004f62:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f66:	600e      	str	r6, [r1, #0]
 8004f68:	d514      	bpl.n	8004f94 <_printf_i+0x1ac>
 8004f6a:	07d9      	lsls	r1, r3, #31
 8004f6c:	bf44      	itt	mi
 8004f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f72:	6023      	strmi	r3, [r4, #0]
 8004f74:	b91d      	cbnz	r5, 8004f7e <_printf_i+0x196>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f023 0320 	bic.w	r3, r3, #32
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	2310      	movs	r3, #16
 8004f80:	e7b0      	b.n	8004ee4 <_printf_i+0xfc>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2378      	movs	r3, #120	; 0x78
 8004f8c:	4828      	ldr	r0, [pc, #160]	; (8005030 <_printf_i+0x248>)
 8004f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f92:	e7e3      	b.n	8004f5c <_printf_i+0x174>
 8004f94:	065e      	lsls	r6, r3, #25
 8004f96:	bf48      	it	mi
 8004f98:	b2ad      	uxthmi	r5, r5
 8004f9a:	e7e6      	b.n	8004f6a <_printf_i+0x182>
 8004f9c:	4616      	mov	r6, r2
 8004f9e:	e7bb      	b.n	8004f18 <_printf_i+0x130>
 8004fa0:	680b      	ldr	r3, [r1, #0]
 8004fa2:	6826      	ldr	r6, [r4, #0]
 8004fa4:	6960      	ldr	r0, [r4, #20]
 8004fa6:	1d1d      	adds	r5, r3, #4
 8004fa8:	600d      	str	r5, [r1, #0]
 8004faa:	0635      	lsls	r5, r6, #24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0x1cc>
 8004fb0:	6018      	str	r0, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0x1d2>
 8004fb4:	0671      	lsls	r1, r6, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0x1c8>
 8004fb8:	8018      	strh	r0, [r3, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	4616      	mov	r6, r2
 8004fc0:	e7ba      	b.n	8004f38 <_printf_i+0x150>
 8004fc2:	680b      	ldr	r3, [r1, #0]
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	600a      	str	r2, [r1, #0]
 8004fc8:	681e      	ldr	r6, [r3, #0]
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f7fb f90e 	bl	80001f0 <memchr>
 8004fd4:	b108      	cbz	r0, 8004fda <_printf_i+0x1f2>
 8004fd6:	1b80      	subs	r0, r0, r6
 8004fd8:	6060      	str	r0, [r4, #4]
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	e7a8      	b.n	8004f38 <_printf_i+0x150>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	4632      	mov	r2, r6
 8004fea:	4649      	mov	r1, r9
 8004fec:	4640      	mov	r0, r8
 8004fee:	47d0      	blx	sl
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d0ab      	beq.n	8004f4c <_printf_i+0x164>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	079b      	lsls	r3, r3, #30
 8004ff8:	d413      	bmi.n	8005022 <_printf_i+0x23a>
 8004ffa:	68e0      	ldr	r0, [r4, #12]
 8004ffc:	9b03      	ldr	r3, [sp, #12]
 8004ffe:	4298      	cmp	r0, r3
 8005000:	bfb8      	it	lt
 8005002:	4618      	movlt	r0, r3
 8005004:	e7a4      	b.n	8004f50 <_printf_i+0x168>
 8005006:	2301      	movs	r3, #1
 8005008:	4632      	mov	r2, r6
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d09b      	beq.n	8004f4c <_printf_i+0x164>
 8005014:	3501      	adds	r5, #1
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	9903      	ldr	r1, [sp, #12]
 800501a:	1a5b      	subs	r3, r3, r1
 800501c:	42ab      	cmp	r3, r5
 800501e:	dcf2      	bgt.n	8005006 <_printf_i+0x21e>
 8005020:	e7eb      	b.n	8004ffa <_printf_i+0x212>
 8005022:	2500      	movs	r5, #0
 8005024:	f104 0619 	add.w	r6, r4, #25
 8005028:	e7f5      	b.n	8005016 <_printf_i+0x22e>
 800502a:	bf00      	nop
 800502c:	08005261 	.word	0x08005261
 8005030:	08005272 	.word	0x08005272

08005034 <__retarget_lock_acquire_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_release_recursive>:
 8005036:	4770      	bx	lr

08005038 <memmove>:
 8005038:	4288      	cmp	r0, r1
 800503a:	b510      	push	{r4, lr}
 800503c:	eb01 0402 	add.w	r4, r1, r2
 8005040:	d902      	bls.n	8005048 <memmove+0x10>
 8005042:	4284      	cmp	r4, r0
 8005044:	4623      	mov	r3, r4
 8005046:	d807      	bhi.n	8005058 <memmove+0x20>
 8005048:	1e43      	subs	r3, r0, #1
 800504a:	42a1      	cmp	r1, r4
 800504c:	d008      	beq.n	8005060 <memmove+0x28>
 800504e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005056:	e7f8      	b.n	800504a <memmove+0x12>
 8005058:	4402      	add	r2, r0
 800505a:	4601      	mov	r1, r0
 800505c:	428a      	cmp	r2, r1
 800505e:	d100      	bne.n	8005062 <memmove+0x2a>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800506a:	e7f7      	b.n	800505c <memmove+0x24>

0800506c <_realloc_r>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	4607      	mov	r7, r0
 8005070:	4614      	mov	r4, r2
 8005072:	460e      	mov	r6, r1
 8005074:	b921      	cbnz	r1, 8005080 <_realloc_r+0x14>
 8005076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800507a:	4611      	mov	r1, r2
 800507c:	f7ff bc54 	b.w	8004928 <_malloc_r>
 8005080:	b922      	cbnz	r2, 800508c <_realloc_r+0x20>
 8005082:	f7ff fc01 	bl	8004888 <_free_r>
 8005086:	4625      	mov	r5, r4
 8005088:	4628      	mov	r0, r5
 800508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508c:	f000 f814 	bl	80050b8 <_malloc_usable_size_r>
 8005090:	42a0      	cmp	r0, r4
 8005092:	d20f      	bcs.n	80050b4 <_realloc_r+0x48>
 8005094:	4621      	mov	r1, r4
 8005096:	4638      	mov	r0, r7
 8005098:	f7ff fc46 	bl	8004928 <_malloc_r>
 800509c:	4605      	mov	r5, r0
 800509e:	2800      	cmp	r0, #0
 80050a0:	d0f2      	beq.n	8005088 <_realloc_r+0x1c>
 80050a2:	4631      	mov	r1, r6
 80050a4:	4622      	mov	r2, r4
 80050a6:	f7ff fbd9 	bl	800485c <memcpy>
 80050aa:	4631      	mov	r1, r6
 80050ac:	4638      	mov	r0, r7
 80050ae:	f7ff fbeb 	bl	8004888 <_free_r>
 80050b2:	e7e9      	b.n	8005088 <_realloc_r+0x1c>
 80050b4:	4635      	mov	r5, r6
 80050b6:	e7e7      	b.n	8005088 <_realloc_r+0x1c>

080050b8 <_malloc_usable_size_r>:
 80050b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050bc:	1f18      	subs	r0, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfbc      	itt	lt
 80050c2:	580b      	ldrlt	r3, [r1, r0]
 80050c4:	18c0      	addlt	r0, r0, r3
 80050c6:	4770      	bx	lr

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
